/**
 * ====================================================================================
 * üõí ARCHIVO DE PRODUCTOS - PASTELER√çA MIL SABORES
 * ====================================================================================
 * 
 * Este archivo centraliza toda la l√≥gica relacionada con productos, carrito de compras
 * y navegaci√≥n entre categor√≠as. Es el coraz√≥n del sistema de e-commerce de la aplicaci√≥n.
 * 
 * üéØ PROP√ìSITO:
 * - Gestionar la base de datos de productos y categor√≠as
 * - Implementar funcionalidad completa del carrito de compras
 * - Manejar navegaci√≥n entre categor√≠as de productos
 * - Proporcionar modales de detalles de productos
 * - Persistir datos del carrito en localStorage
 * 
 * üìã FUNCIONALIDADES PRINCIPALES:
 * - Base de datos de productos con categor√≠as
 * - Sistema de carrito con persistencia
 * - Modales de detalles de productos
 * - Navegaci√≥n entre categor√≠as con tabs
 * - Notificaciones toast para feedback del usuario
 * - Gesti√≥n de cantidad de productos
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Carga productos desde base de datos local
 * 2. Inicializa carrito desde localStorage
 * 3. Configura event listeners para interacciones
 * 4. Maneja navegaci√≥n entre categor√≠as
 * 5. Gestiona agregar/quitar productos del carrito
 * 6. Persiste cambios en localStorage
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Sistema de carrito persistente
 * - Navegaci√≥n fluida entre categor√≠as
 * - Modales responsivos con Bootstrap
 * - Notificaciones toast para feedback
 * - Gesti√≥n de cantidad con botones +/-
 * - Integraci√≥n con sistema de componentes
 * 
 * üìÑ ARCHIVOS RELACIONADOS:
 * - index.html: P√°gina principal con secci√≥n de productos
 * - components/navbar.html: Navegaci√≥n con dropdown de categor√≠as
 * - components/cart-modal.html: Modal del carrito de compras
 * - js/components.js: Sistema de componentes y navegaci√≥n
 */

// ====================================================================================
// üìã SECCI√ìN 1: VARIABLES GLOBALES Y PERSISTENCIA
// ====================================================================================

/**
 * ====================================================================================
 * üõí VARIABLES GLOBALES DEL SISTEMA
 * ====================================================================================
 * 
 * Estas variables mantienen el estado global del sistema de productos y carrito.
 * 
 * üìã VARIABLES DISPONIBLES:
 * - cart: Array que contiene los productos en el carrito
 * - currentModalProductId: ID del producto actualmente mostrado en el modal
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Estado global accesible desde todas las funciones
 * - Persistencia autom√°tica en localStorage
 * - Sincronizaci√≥n con interfaz de usuario
 */

// Array que contiene los productos en el carrito
let cart = [];

// ID del producto actualmente mostrado en el modal de detalles
let currentModalProductId = null;

/**
 * ====================================================================================
 * üíæ CARGA DE CARRITO DESDE LOCALSTORAGE
 * ====================================================================================
 * 
 * Esta funci√≥n recupera el carrito de compras guardado en localStorage al inicializar
 * la aplicaci√≥n, asegurando que el usuario mantenga sus productos seleccionados
 * entre sesiones.
 * 
 * üéØ PROP√ìSITO:
 * - Recuperar carrito de compras de sesiones anteriores
 * - Mantener persistencia de datos del usuario
 * - Inicializar el estado global del carrito
 * - Manejar errores de parsing de JSON
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 
 * PASO 1: RECUPERACI√ìN DE DATOS
 * - Busca el carrito guardado en localStorage con clave 'milSaboresCart'
 * - Si no existe ‚Üí Mantiene carrito vac√≠o
 * 
 * PASO 2: PARSING DE JSON
 * - Intenta convertir el string JSON a objeto JavaScript
 * - Si hay error ‚Üí Muestra error en consola y resetea carrito
 * 
 * PASO 3: INICIALIZACI√ìN
 * - Asigna el carrito recuperado a la variable global
 * - Actualiza la interfaz de usuario
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Manejo seguro de errores de parsing
 * - Fallback a carrito vac√≠o en caso de error
 * - Logs informativos para debugging
 * - Persistencia autom√°tica entre sesiones
 * 
 * üìÑ USADO EN:
 * - Inicializaci√≥n de la aplicaci√≥n
 * - Recuperaci√≥n de estado despu√©s de recarga de p√°gina
 */
function loadCartFromStorage() {
    // ====================================================================================
    // PASO 1: RECUPERACI√ìN DE DATOS DESDE LOCALSTORAGE
    // ====================================================================================
    const savedCart = localStorage.getItem('milSaboresCart');
    if (savedCart) {
        try {
            // ====================================================================================
            // PASO 2: PARSING SEGURO DE JSON
            // ====================================================================================
            cart = JSON.parse(savedCart);
        } catch (e) {
            // ====================================================================================
            // PASO 3: MANEJO DE ERRORES
            // ====================================================================================
            console.error('Error al cargar carrito desde localStorage:', e);
            cart = [];
        }
    }
}

/**
 * ====================================================================================
 * üíæ GUARDADO DE CARRITO EN LOCALSTORAGE
 * ====================================================================================
 * 
 * Esta funci√≥n guarda el estado actual del carrito en localStorage para mantener
 * persistencia entre sesiones y recargas de p√°gina.
 * 
 * üéØ PROP√ìSITO:
 * - Guardar estado actual del carrito en localStorage
 * - Mantener persistencia de datos del usuario
 * - Sincronizar cambios con almacenamiento local
 * - Manejar errores de escritura en localStorage
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 
 * PASO 1: SERIALIZACI√ìN
 * - Convierte el array del carrito a string JSON
 * - Prepara datos para almacenamiento
 * 
 * PASO 2: ALMACENAMIENTO
 * - Guarda el carrito en localStorage con clave 'milSaboresCart'
 * - Si hay error ‚Üí Muestra error en consola
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Manejo seguro de errores de escritura
 * - Serializaci√≥n autom√°tica a JSON
 * - Logs informativos para debugging
 * - Persistencia autom√°tica en cada cambio
 * 
 * üìÑ USADO EN:
 * - Despu√©s de agregar productos al carrito
 * - Despu√©s de modificar cantidades
 * - Despu√©s de eliminar productos
 * - Al cerrar la aplicaci√≥n
 */
function saveCartToStorage() {
    try {
        // ====================================================================================
        // PASO 1: SERIALIZACI√ìN Y ALMACENAMIENTO
        // ====================================================================================
        localStorage.setItem('milSaboresCart', JSON.stringify(cart));
    } catch (e) {
        // ====================================================================================
        // PASO 2: MANEJO DE ERRORES
        // ====================================================================================
        console.error('Error al guardar carrito en localStorage:', e);
    }
}

// ====================================================================================
// üìã SECCI√ìN 2: BASE DE DATOS DE PRODUCTOS
// ====================================================================================

/**
 * ====================================================================================
 * üóÑÔ∏è BASE DE DATOS DE PRODUCTOS Y CATEGOR√çAS
 * ====================================================================================
 * 
 * Esta es la base de datos local que contiene todos los productos organizados por
 * categor√≠as. Cada producto incluye informaci√≥n completa para la tienda online.
 * 
 * üéØ PROP√ìSITO:
 * - Almacenar informaci√≥n completa de productos
 * - Organizar productos por categor√≠as
 * - Proporcionar datos para la interfaz de usuario
 * - Mantener consistencia en toda la aplicaci√≥n
 * 
 * üìã ESTRUCTURA DE DATOS:
 * - categorias: Objeto con categor√≠as de productos
 * - cada categor√≠a contiene: nombre, icono, productos
 * - cada producto contiene: id, nombre, precio, imagen, descripci√≥n, etc.
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Datos estructurados y organizados
 * - Informaci√≥n completa de cada producto
 * - Categorizaci√≥n l√≥gica de productos
 * - F√°cil mantenimiento y actualizaci√≥n
 * - Integraci√≥n con sistema de carrito
 * 
 * üìÑ USADO EN:
 * - Generaci√≥n din√°mica de productos
 * - Modales de detalles de productos
 * - Sistema de carrito de compras
 * - Navegaci√≥n entre categor√≠as
 */
console.log('üöÄ productos.js cargado correctamente');

// Base de datos de productos cargada din√°micamente desde JSON
let productosDB = null;

/**
 * ====================================================================================
 * üóÑÔ∏è CARGAR BASE DE DATOS DE PRODUCTOS
 * ====================================================================================
 * 
 * Carga la base de datos de productos desde el archivo JSON externo.
 * Esta funci√≥n se ejecuta al inicializar la aplicaci√≥n.
 */
async function loadProductosDB() {
    try {
        console.log('üìÅ Cargando base de datos de productos...');
        const response = await fetch('productos.json');
        
        if (!response.ok) {
            throw new Error(`Error HTTP ${response.status}: ${response.statusText}`);
        }
        
        productosDB = await response.json();
        console.log('‚úÖ Base de datos de productos cargada correctamente');
        console.log(`üìä Categor√≠as disponibles: ${Object.keys(productosDB.categorias).length}`);
        
        return productosDB;
    } catch (error) {
        console.error('‚ùå Error al cargar la base de datos de productos:', error);
        showDatabaseError();
        throw new Error(`No se pudo cargar productos.json: ${error.message}`);
    }
}

/**
 * ====================================================================================
 * üö® MOSTRAR ERROR DE BASE DE DATOS
 * ====================================================================================
 * 
 * Muestra un error visible cuando no se puede cargar la base de datos de productos.
 */
function showDatabaseError() {
    console.error('üö® ERROR CR√çTICO: Base de datos de productos no disponible');
    console.error('üìÅ Verificar que el archivo productos.json existe y es accesible');
    
    // Mostrar error con SweetAlert2
    Swal.fire({
        icon: 'error',
        title: 'Error de Base de Datos',
        html: `
            <p><strong>No se pudo cargar el archivo productos.json</strong></p>
            <hr>
            <p class="mb-2">Posibles causas:</p>
            <ul class="text-start">
                <li>El archivo productos.json no existe</li>
                <li>Error de permisos de acceso</li>
                <li>Problema de conexi√≥n o servidor</li>
                <li>Formato JSON inv√°lido</li>
            </ul>
            <hr>
            <small class="text-muted">
                <i class="fas fa-info-circle"></i> 
                Verifica la consola del navegador para m√°s detalles t√©cnicos
            </small>
        `,
        confirmButtonText: 'Entendido',
        confirmButtonColor: '#e74c3c'
    });
}


// ========================================
//   FUNCIONES DE PRODUCTOS
// ========================================

// Variables globales para filtros
let filtroPrecioActivo = false;
let precioMinimo = 0;
let precioMaximo = 999999;

// Funci√≥n para obtener todos los productos en un objeto plano
// ====================================================================================
// üìã SECCI√ìN 3: FUNCIONES DE OBTENCI√ìN DE PRODUCTOS
// ====================================================================================

/**
 * ====================================================================================
 * üì¶ OBTENCI√ìN DE TODOS LOS PRODUCTOS
 * ====================================================================================
 * 
 * Esta funci√≥n obtiene todos los productos de todas las categor√≠as y los organiza
 * en un objeto indexado por ID para facilitar el acceso.
 * 
 * üéØ PROP√ìSITO:
 * - Consolidar todos los productos en un solo objeto
 * - Indexar productos por ID para acceso r√°pido
 * - Facilitar b√∫squedas por ID de producto
 * - Proporcionar vista unificada de todos los productos
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 
 * PASO 1: INICIALIZACI√ìN
 * - Crea objeto vac√≠o para almacenar productos
 * 
 * PASO 2: ITERACI√ìN POR CATEGOR√çAS
 * - Recorre todas las categor√≠as de productosDB
 * - Extrae productos de cada categor√≠a
 * 
 * PASO 3: INDEXACI√ìN POR ID
 * - Asigna cada producto al objeto usando su ID como clave
 * - Retorna objeto indexado
 * 
 * üìã VALOR DE RETORNO:
 * - Objeto con productos indexados por ID
 * - Estructura: {productoId: productoObject, ...}
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Acceso r√°pido por ID de producto
 * - Consolidaci√≥n de datos de m√∫ltiples categor√≠as
 * - Estructura optimizada para b√∫squedas
 * - Integraci√≥n con sistema de carrito
 * 
 * üìÑ USADO EN:
 * - B√∫squeda de productos por ID
 * - Generaci√≥n de contenido din√°mico
 * - Sistema de carrito de compras
 */
function getAllProducts() {
    // ====================================================================================
    // PASO 1: INICIALIZACI√ìN DEL OBJETO DE PRODUCTOS
    // ====================================================================================
    const productos = {};
    
    // ====================================================================================
    // PASO 2: ITERACI√ìN POR CATEGOR√çAS Y PRODUCTOS
    // ====================================================================================
    Object.values(productosDB.categorias).forEach(categoria => {
        categoria.productos.forEach(producto => {
            productos[producto.id] = producto;
        });
    });
    
    // ====================================================================================
    // PASO 3: RETORNO DEL OBJETO INDEXADO
    // ====================================================================================
    return productos;
}

/**
 * ====================================================================================
 * üîç OBTENCI√ìN DE PRODUCTO POR ID
 * ====================================================================================
 * 
 * Esta funci√≥n busca y retorna un producto espec√≠fico usando su ID √∫nico.
 * 
 * üéØ PROP√ìSITO:
 * - Buscar producto espec√≠fico por ID
 * - Proporcionar acceso directo a datos del producto
 * - Facilitar operaciones con productos individuales
 * - Centralizar l√≥gica de b√∫squeda por ID
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 
 * PASO 1: B√öSQUEDA
 * - Usa getAllProducts() para obtener todos los productos
 * - Busca producto por ID en el objeto indexado
 * 
 * PASO 2: LOGGING
 * - Registra la b√∫squeda en consola para debugging
 * 
 * PASO 3: RETORNO
 * - Retorna el producto encontrado o undefined
 * 
 * üìã PAR√ÅMETROS:
 * - id: ID √∫nico del producto (string)
 * 
 * üìã VALOR DE RETORNO:
 * - Objeto del producto si existe
 * - undefined si no se encuentra
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - B√∫squeda r√°pida por ID
 * - Logging para debugging
 * - Manejo seguro de productos no encontrados
 * - Integraci√≥n con sistema de carrito
 * 
 * üìÑ USADO EN:
 * - Modales de detalles de productos
 * - Sistema de carrito de compras
 * - Operaciones de productos individuales
 * 
 * @param {string} id - ID √∫nico del producto
 * @returns {object|undefined} - Objeto del producto o undefined
 */
function getProductById(id) {
    // ====================================================================================
    // PASO 1: B√öSQUEDA DEL PRODUCTO
    // ====================================================================================
    const producto = getAllProducts()[id];
    
    // ====================================================================================
    // PASO 2: LOGGING PARA DEBUGGING
    // ====================================================================================
    console.log('getProductById:', id, producto);
    
    // ====================================================================================
    // PASO 3: RETORNO DEL PRODUCTO
    // ====================================================================================
    return producto;
}

/**
 * ====================================================================================
 * üìÇ OBTENCI√ìN DE PRODUCTOS POR CATEGOR√çA
 * ====================================================================================
 * 
 * Esta funci√≥n obtiene todos los productos de una categor√≠a espec√≠fica.
 * 
 * üéØ PROP√ìSITO:
 * - Obtener productos de una categor√≠a espec√≠fica
 * - Facilitar navegaci√≥n por categor√≠as
 * - Proporcionar datos para tabs de productos
 * - Centralizar l√≥gica de filtrado por categor√≠a
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 
 * PASO 1: B√öSQUEDA DE CATEGOR√çA
 * - Busca la categor√≠a en productosDB usando categoryKey
 * - Usa optional chaining para manejo seguro
 * 
 * PASO 2: RETORNO DE PRODUCTOS
 * - Retorna array de productos de la categor√≠a
 * - Retorna array vac√≠o si la categor√≠a no existe
 * 
 * üìã PAR√ÅMETROS:
 * - categoryKey: Clave de la categor√≠a (string)
 * 
 * üìã VALOR DE RETORNO:
 * - Array de productos de la categor√≠a
 * - Array vac√≠o si la categor√≠a no existe
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Manejo seguro de categor√≠as inexistentes
 * - Retorno consistente (siempre array)
 * - Acceso directo a productos de categor√≠a
 * - Integraci√≥n con sistema de tabs
 * 
 * üìÑ USADO EN:
 * - Generaci√≥n de contenido de tabs
 * - Navegaci√≥n entre categor√≠as
 * - Filtrado de productos
 * 
 * @param {string} categoryKey - Clave de la categor√≠a
 * @returns {array} - Array de productos de la categor√≠a
 */
function getProductsByCategory(categoryKey) {
    return productosDB.categorias[categoryKey]?.productos || [];
}

/**
 * ====================================================================================
 * üìã OBTENCI√ìN DE TODAS LAS CATEGOR√çAS
 * ====================================================================================
 * 
 * Esta funci√≥n obtiene todas las categor√≠as disponibles en la base de datos.
 * 
 * üéØ PROP√ìSITO:
 * - Obtener todas las categor√≠as de productos
 * - Facilitar generaci√≥n de navegaci√≥n
 * - Proporcionar datos para dropdowns y tabs
 * - Centralizar acceso a categor√≠as
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 
 * PASO 1: ACCESO DIRECTO
 * - Accede directamente a productosDB.categorias
 * - Retorna objeto completo de categor√≠as
 * 
 * üìã VALOR DE RETORNO:
 * - Objeto con todas las categor√≠as
 * - Estructura: {categoryKey: categoryObject, ...}
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Acceso directo a datos de categor√≠as
 * - Retorno completo de informaci√≥n
 * - Integraci√≥n con sistema de navegaci√≥n
 * - F√°cil iteraci√≥n y manipulaci√≥n
 * 
 * üìÑ USADO EN:
 * - Generaci√≥n de tabs de categor√≠as
 * - Navegaci√≥n del navbar
 * - Dropdowns de categor√≠as
 * 
 * @returns {object} - Objeto con todas las categor√≠as
 */
function getAllCategories() {
    return productosDB.categorias;
}

// Funci√≥n para filtrar productos por precio
function filtrarProductosPorPrecio(productos) {
    if (!filtroPrecioActivo) return productos;
    
    return productos.filter(producto => 
        producto.precio >= precioMinimo && producto.precio <= precioMaximo
    );
}

// Funci√≥n para aplicar filtro de precio
function aplicarFiltroPrecio() {
    const precioMinInput = document.getElementById('precioMin');
    const precioMaxInput = document.getElementById('precioMax');
    
    if (!precioMinInput || !precioMaxInput) return;
    
    const min = parseInt(precioMinInput.value) || 0;
    const max = parseInt(precioMaxInput.value) || 999999;
    
    // Validar que el m√≠nimo no sea mayor al m√°ximo
    if (min > max) {
        showCartNotification('El precio m√≠nimo no puede ser mayor al m√°ximo', 'error');
        return;
    }
    
    // Aplicar filtros
    filtroPrecioActivo = true;
    precioMinimo = min;
    precioMaximo = max;
    
    // Regenerar contenido
    regenerateProductsContent();
    
    // Mostrar notificaci√≥n
    const cantidadFiltrada = contarProductosFiltrados();
    showCartNotification(`Filtro aplicado: ${cantidadFiltrada} productos encontrados`, 'success');
}

// Funci√≥n para limpiar filtro de precio
function limpiarFiltroPrecio() {
    const precioMinInput = document.getElementById('precioMin');
    const precioMaxInput = document.getElementById('precioMax');
    
    if (precioMinInput) precioMinInput.value = '';
    if (precioMaxInput) precioMaxInput.value = '';
    
    // Limpiar filtros
    filtroPrecioActivo = false;
    precioMinimo = 0;
    precioMaximo = 999999;
    
    // Regenerar contenido
    regenerateProductsContent();
    
    showCartNotification('Filtro de precio limpiado', 'info');
}

// Funci√≥n para contar productos filtrados
function contarProductosFiltrados() {
    let total = 0;
    Object.values(productosDB.categorias).forEach(categoria => {
        const productosFiltrados = filtrarProductosPorPrecio(categoria.productos);
        total += productosFiltrados.length;
    });
    return total;
}

// Funci√≥n para regenerar contenido de productos
function regenerateProductsContent() {
    const productTabsContent = document.getElementById('productTabsContent');
    if (!productTabsContent) return;
    
    const todosHTML = generateTodosHTML();
    const categoriesHTML = Object.entries(productosDB.categorias).map(([key, categoria]) => 
        generateCategoryHTML(key, categoria)
    ).join('');
    
    productTabsContent.innerHTML = todosHTML + categoriesHTML;
    
    // Configurar botones de cantidad despu√©s de regenerar el HTML
    setupQuantityButtons();
    
    // Configurar listeners de cambio de tabs
    setupTabChangeListeners();
}

// Funci√≥n para generar HTML de una card de producto
function generateProductCardHTML(producto) {
    let stockBadge = '';
    if (producto.stock === 0) {
        stockBadge = `<div class="product-badge out-of-stock">Sin Stock</div>`;
    } else if (producto.stock < 10) {
        stockBadge = `<div class="product-badge low-stock">Poco Stock</div>`;
    } else if (producto.featured) {
        stockBadge = `<div class="product-badge featured">Destacado</div>`;
    }
    
    const ratingStars = Array.from({length: 5}, (_, i) => 
        `<i class="fas fa-star ${i < Math.floor(producto.rating) ? 'text-warning' : 'text-muted'}"></i>`
    ).join('');
    
    return `
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card product-card h-100">
                <div class="product-image">
                    <img src="${producto.imagen}" class="card-img-top" alt="${producto.nombre}">
                    ${stockBadge}
                </div>
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">${producto.nombre}</h5>
                    <p class="card-text text-muted">${producto.descripcion}</p>
                    <div class="product-rating mb-2">
                        ${ratingStars}
                        <span class="ms-1 text-muted">(${producto.reviews})</span>
                    </div>
                    <div class="product-price mb-3">
                        <span class="h4">$${producto.precio.toLocaleString('es-CL')}</span>
                    </div>
                    <div class="stock-info mb-3">
                        <small class="text-muted">
                            <i class="fas fa-box me-1"></i>
                            Stock: <strong>${producto.stock} unidades</strong>
                        </small>
                    </div>
                    
                    <!-- Botones de acci√≥n -->
                    <div class="mt-auto">
                        <!-- Fila con cantidad y agregar al carrito -->
                        <div class="row g-2 mb-2 align-items-end">
                            <div class="col-3">
                                <input type="number" class="form-control form-control-sm py-2" id="quantity-${producto.id}" value="1" min="1" max="${producto.stock}" placeholder="Cant.">
                            </div>
                            <div class="col-9">
                                <button class="btn btn-primary w-100 py-2" onclick="addToCart('${producto.id}')">
                                    <i class="fas fa-shopping-cart me-1"></i>Agregar al Carrito
                                </button>
                            </div>
                        </div>
                        
                        <!-- Bot√≥n ver detalles -->
                        <button class="btn btn-outline-primary w-100 mt-2" onclick="showProductDetails('${producto.id}')">
                            <i class="fas fa-eye me-2"></i>Ver Detalles
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// Funci√≥n para generar HTML de una categor√≠a completa
function generateCategoryHTML(categoriaKey, categoria) {
    const productosFiltrados = filtrarProductosPorPrecio(categoria.productos);
    const productosHTML = productosFiltrados.map(producto => 
        generateProductCardHTML(producto)
    ).join('');
    
    // Mostrar mensaje si no hay productos que coincidan con el filtro
    const contenidoHTML = productosFiltrados.length > 0 ? 
        `<div class="row">${productosHTML}</div>` :
        `<div class="text-center py-5">
            <i class="fas fa-search fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No se encontraron productos</h5>
            <p class="text-muted">Intenta ajustar el filtro de precio</p>
        </div>`;
    
    return `
        <div class="tab-pane fade" id="${categoriaKey}" role="tabpanel">
            ${contenidoHTML}
        </div>
    `;
}

/**
 * ====================================================================================
 * üìã GENERACI√ìN DE HTML DE TABS DE CATEGOR√çAS
 * ====================================================================================
 * 
 * Esta funci√≥n genera din√°micamente el HTML de los tabs de navegaci√≥n para las
 * categor√≠as de productos, utilizando la estructura de datos de productosDB.categorias.
 * 
 * üéØ PROP√ìSITO:
 * - Crear tabs de navegaci√≥n para cada categor√≠a de productos
 * - Generar tab especial "Todos los Productos" que muestra todos los productos
 * - Configurar atributos Bootstrap para funcionalidad de tabs
 * - Integrar iconos Font Awesome para cada categor√≠a
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Crea tab fijo "Todos los Productos" (siempre activo por defecto)
 * 2. Itera sobre productosDB.categorias para generar tabs din√°micos
 * 3. Extrae datos espec√≠ficos de cada categor√≠a (nombre, icono, key)
 * 4. Genera HTML con atributos Bootstrap para funcionalidad
 * 5. Combina todos los tabs en una cadena HTML completa
 * 
 * üìä UTILIZACI√ìN DEL JSON productosDB.categorias:
 * - Object.entries(productosDB.categorias): Convierte objeto en array de [key, value]
 * - [key, categoria]: Destructuring para obtener clave y objeto de categor√≠a
 * - categoria.nombre: Nombre legible de la categor√≠a (ej: "Tortas Cuadradas")
 * - categoria.icono: Clase CSS del icono Font Awesome (ej: "fas fa-square")
 * - key: Identificador √∫nico de la categor√≠a (ej: "tortas-cuadradas")
 * 
 * ‚ö° CARACTER√çSTICAS DEL HTML GENERADO:
 * - Estructura Bootstrap nav-pills para tabs
 * - Atributos data-bs-toggle="pill" para funcionalidad Bootstrap
 * - data-bs-target="#id" para vincular tab con contenido
 * - IDs √∫nicos para cada tab (ej: "tortas-cuadradas-tab")
 * - Iconos Font Awesome integrados
 * - Tab "Todos" marcado como activo por defecto
 * 
 * üìã ESTRUCTURA JSON UTILIZADA:
 * productosDB.categorias = {
 *   "tortas-cuadradas": {
 *     nombre: "Tortas Cuadradas",
 *     icono: "fas fa-square",
 *     productos: [...]
 *   },
 *   "tortas-circulares": {
 *     nombre: "Tortas Circulares", 
 *     icono: "fas fa-circle",
 *     productos: [...]
 *   }
 * }
 * 
 * @returns {string} HTML completo de todos los tabs de categor√≠as
 */
function generateTabsHTML() {
    console.log('üîß Generando HTML de tabs de categor√≠as...');
    console.log('üìä Categor√≠as disponibles:', Object.keys(productosDB.categorias));
    
    // ====================================================================================
    // üìã TAB FIJO "TODOS LOS PRODUCTOS"
    // ====================================================================================
    // Este tab siempre se genera primero y est√° activo por defecto.
    // Muestra todos los productos de todas las categor√≠as combinados.
    const todosTab = `<li class="nav-item" role="presentation">
        <button class="nav-link active" id="todos-tab" data-bs-toggle="pill" 
            data-bs-target="#todos" type="button" role="tab">
            <i class="fas fa-th-large me-2"></i>Todos los Productos
        </button>
    </li>`;
    
    console.log('‚úÖ Tab "Todos los Productos" generado');
    
    // ====================================================================================
    // üìã GENERACI√ìN DIN√ÅMICA DE TABS DE CATEGOR√çAS
    // ====================================================================================
    // Object.entries() convierte el objeto productosDB.categorias en un array de pares [key, value]
    // Ejemplo: [["tortas-cuadradas", {nombre: "Tortas Cuadradas", icono: "fas fa-square", productos: [...]}]]
    const categoriasTabs = Object.entries(productosDB.categorias).map(([key, categoria]) => {
        console.log(`üîß Procesando categor√≠a: ${key} -> ${categoria.nombre}`);
        
        // ====================================================================================
        // üìã DESTRUCTURING DE DATOS DE CATEGOR√çA
        // ====================================================================================
        // key: Identificador √∫nico de la categor√≠a (ej: "tortas-cuadradas")
        // categoria: Objeto completo de la categor√≠a con propiedades:
        //   - nombre: Nombre legible (ej: "Tortas Cuadradas")
        //   - icono: Clase CSS del icono Font Awesome (ej: "fas fa-square")
        //   - productos: Array de productos de esta categor√≠a
        
        return `<li class="nav-item" role="presentation">
            <button class="nav-link" id="${key}-tab" data-bs-toggle="pill" 
                data-bs-target="#${key}" type="button" role="tab">
                <i class="${categoria.icono} me-2"></i>${categoria.nombre}
            </button>
        </li>`;
    }).join(''); // join('') convierte el array de strings en una sola cadena
    
    console.log(`‚úÖ ${Object.keys(productosDB.categorias).length} tabs de categor√≠as generados`);
    
    // ====================================================================================
    // üìã COMBINACI√ìN Y RETORNO
    // ====================================================================================
    // Combina el tab fijo "Todos" con todos los tabs din√°micos de categor√≠as
    const resultado = todosTab + categoriasTabs;
    console.log('üéØ HTML de tabs generado exitosamente');
    
    return resultado;
}

/**
 * ====================================================================================
 * üìã GENERACI√ìN DE HTML DEL TAB "TODOS LOS PRODUCTOS"
 * ====================================================================================
 * 
 * Esta funci√≥n genera el contenido del tab "Todos los Productos" que muestra
 * todos los productos de todas las categor√≠as combinados en una sola vista.
 * 
 * üéØ PROP√ìSITO:
 * - Combinar productos de todas las categor√≠as en una vista unificada
 * - Aplicar filtros de precio a todos los productos
 * - Generar tarjetas de productos para cada elemento
 * - Manejar casos donde no hay productos que coincidan con filtros
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Extrae todos los productos de todas las categor√≠as usando Object.values()
 * 2. Combina arrays de productos usando spread operator (...)
 * 3. Aplica filtro de precios usando filtrarProductosPorPrecio()
 * 4. Genera HTML de tarjetas para cada producto usando generateProductCardHTML()
 * 5. Maneja caso de "sin resultados" con mensaje informativo
 * 6. Envuelve todo en estructura Bootstrap tab-pane
 * 
 * üìä UTILIZACI√ìN DEL JSON productosDB.categorias:
 * - Object.values(productosDB.categorias): Obtiene solo los valores (objetos de categor√≠as)
 * - categoria.productos: Array de productos espec√≠ficos de cada categor√≠a
 * - ...categoria.productos: Spread operator para combinar arrays
 * - productosDB.categorias = {
 *     "tortas-cuadradas": { productos: [producto1, producto2, ...] },
 *     "tortas-circulares": { productos: [producto3, producto4, ...] }
 *   }
 * 
 * ‚ö° CARACTER√çSTICAS DEL HTML GENERADO:
 * - Estructura Bootstrap tab-pane con clases "fade show active"
 * - ID "todos" para vinculaci√≥n con tab correspondiente
 * - Grid responsivo con clase "row" para tarjetas de productos
 * - Mensaje de "sin resultados" con iconos Font Awesome
 * - Integraci√≥n con sistema de filtros de precio
 * 
 * üìã ESTRUCTURA DE PRODUCTOS UTILIZADA:
 * Cada producto en categoria.productos tiene la estructura:
 * {
 *   id: "unique-id",
 *   nombre: "Nombre del Producto",
 *   precio: 15000,
 *   descripcion: "Descripci√≥n detallada",
 *   imagen: "ruta/imagen.jpg",
 *   stock: 10,
 *   categoria: "tortas-cuadradas"
 * }
 * 
 * @returns {string} HTML completo del tab "Todos los Productos"
 */
function generateTodosHTML() {
    console.log('üîß Generando HTML del tab "Todos los Productos"...');
    
    // ====================================================================================
    // üìã EXTRACCI√ìN DE TODOS LOS PRODUCTOS DE TODAS LAS CATEGOR√çAS
    // ====================================================================================
    // Object.values() obtiene solo los valores (objetos de categor√≠as) del objeto productosDB.categorias
    // Ejemplo: [{nombre: "Tortas Cuadradas", productos: [...]}, {nombre: "Tortas Circulares", productos: [...]}]
    const todosProductos = [];
    Object.values(productosDB.categorias).forEach(categoria => {
        console.log(`üì¶ Extrayendo productos de categor√≠a: ${categoria.nombre} (${categoria.productos.length} productos)`);
        
        // Spread operator (...) combina el array de productos de esta categor√≠a con el array principal
        // Ejemplo: todosProductos = [...todosProductos, producto1, producto2, producto3]
        todosProductos.push(...categoria.productos);
    });
    
    console.log(`üìä Total de productos combinados: ${todosProductos.length}`);
    
    // ====================================================================================
    // üìã APLICACI√ìN DE FILTROS DE PRECIO
    // ====================================================================================
    // filtrarProductosPorPrecio() aplica los filtros de precio configurados por el usuario
    // Utiliza los valores de los sliders de precio m√≠nimo y m√°ximo
    const productosFiltrados = filtrarProductosPorPrecio(todosProductos);
    console.log(`üîç Productos despu√©s del filtro de precio: ${productosFiltrados.length}`);
    
    // ====================================================================================
    // üìã GENERACI√ìN DE HTML DE TARJETAS DE PRODUCTOS
    // ====================================================================================
    // map() transforma cada producto en su HTML de tarjeta correspondiente
    // generateProductCardHTML() crea la estructura completa de tarjeta Bootstrap
    const productosHTML = productosFiltrados.map(producto => {
        console.log(`üé® Generando tarjeta para producto: ${producto.nombre}`);
        return generateProductCardHTML(producto);
    }).join(''); // join('') convierte el array de strings en una sola cadena HTML
    
    // ====================================================================================
    // üìã MANEJO DE CASO "SIN RESULTADOS"
    // ====================================================================================
    // Si no hay productos que coincidan con los filtros, muestra mensaje informativo
    const contenidoHTML = productosFiltrados.length > 0 ? 
        `<div class="row">${productosHTML}</div>` :
        `<div class="text-center py-5">
            <i class="fas fa-search fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No se encontraron productos</h5>
            <p class="text-muted">Intenta ajustar el filtro de precio</p>
        </div>`;
    
    console.log(`‚úÖ Contenido HTML generado: ${productosFiltrados.length > 0 ? 'Con productos' : 'Sin resultados'}`);
    
    // ====================================================================================
    // üìã ESTRUCTURA FINAL DEL TAB
    // ====================================================================================
    // Estructura Bootstrap tab-pane con:
    // - "fade show active": Clases para transici√≥n y estado activo
    // - id="todos": Identificador para vinculaci√≥n con tab
    // - role="tabpanel": Atributo de accesibilidad
    const resultado = `
        <div class="tab-pane fade show active" id="todos" role="tabpanel">
            ${contenidoHTML}
        </div>
    `;
    
    console.log('üéØ HTML del tab "Todos los Productos" generado exitosamente');
    
    return resultado;
}

/**
 * ====================================================================================
 * üìã GENERACI√ìN COMPLETA DE CONTENIDO DE PRODUCTOS DIN√ÅMICAMENTE
 * ====================================================================================
 * 
 * Esta funci√≥n es el coordinador principal que genera todo el contenido de productos
 * de forma din√°mica, incluyendo tabs de navegaci√≥n y contenido de cada categor√≠a.
 * 
 * üéØ PROP√ìSITO:
 * - Coordinar la generaci√≥n de todos los elementos de productos
 * - Generar tabs de navegaci√≥n para categor√≠as
 * - Crear contenido del tab "Todos los Productos"
 * - Generar contenido espec√≠fico para cada categor√≠a individual
 * - Retornar estructura organizada para inserci√≥n en DOM
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Genera HTML de tabs de navegaci√≥n usando generateTabsHTML()
 * 2. Genera contenido del tab "Todos los Productos" usando generateTodosHTML()
 * 3. Itera sobre cada categor√≠a para generar contenido espec√≠fico
 * 4. Combina todo el contenido en estructura organizada
 * 5. Retorna objeto con tabs y contenido separados
 * 
 * üìä UTILIZACI√ìN DEL JSON productosDB.categorias:
 * - Object.entries(): Convierte objeto en array de [key, value] para iteraci√≥n
 * - [key, categoria]: Destructuring para obtener clave y objeto de categor√≠a
 * - generateCategoryHTML(key, categoria): Genera contenido espec√≠fico de cada categor√≠a
 * - key: Identificador √∫nico usado para IDs y navegaci√≥n
 * - categoria: Objeto completo con nombre, icono y productos
 * 
 * ‚ö° CARACTER√çSTICAS DEL RESULTADO:
 * - Estructura organizada con tabs y contenido separados
 * - Tabs de navegaci√≥n con iconos Font Awesome
 * - Contenido del tab "Todos" activo por defecto
 * - Contenido espec√≠fico para cada categor√≠a individual
 * - HTML listo para inserci√≥n directa en DOM
 * 
 * üìã ESTRUCTURA JSON UTILIZADA:
 * productosDB.categorias = {
 *   "tortas-cuadradas": {
 *     nombre: "Tortas Cuadradas",
 *     icono: "fas fa-square",
 *     productos: [
 *       {id: "torta-chocolate", nombre: "Torta de Chocolate", precio: 15000, ...},
 *       {id: "torta-vainilla", nombre: "Torta de Vainilla", precio: 12000, ...}
 *     ]
 *   },
 *   "tortas-circulares": {
 *     nombre: "Tortas Circulares",
 *     icono: "fas fa-circle", 
 *     productos: [
 *       {id: "torta-frutilla", nombre: "Torta de Frutilla", precio: 18000, ...}
 *     ]
 *   }
 * }
 * 
 * üì§ ESTRUCTURA DE RETORNO:
 * {
 *   tabs: "<li>Tab Todos</li><li>Tab Categor√≠a 1</li><li>Tab Categor√≠a 2</li>...",
 *   categories: "<div id='todos'>Contenido Todos</div><div id='cat1'>Contenido Cat1</div>..."
 * }
 * 
 * @returns {Object} Objeto con propiedades tabs y categories conteniendo HTML
 */
function generateProductsContent() {
    console.log('üöÄ Iniciando generaci√≥n completa de contenido de productos...');
    console.log('üìä Categor√≠as disponibles:', Object.keys(productosDB.categorias));
    
    // ====================================================================================
    // üìã GENERACI√ìN DE TABS DE NAVEGACI√ìN
    // ====================================================================================
    // generateTabsHTML() crea todos los tabs de navegaci√≥n incluyendo:
    // - Tab fijo "Todos los Productos" (activo por defecto)
    // - Tabs din√°micos para cada categor√≠a con iconos Font Awesome
    // - Atributos Bootstrap para funcionalidad de tabs
    const tabsHTML = generateTabsHTML();
    console.log('‚úÖ Tabs de navegaci√≥n generados');
    
    // ====================================================================================
    // üìã GENERACI√ìN DE CONTENIDO DEL TAB "TODOS LOS PRODUCTOS"
    // ====================================================================================
    // generateTodosHTML() crea el contenido del tab que muestra todos los productos
    // de todas las categor√≠as combinados, con filtros de precio aplicados
    const todosHTML = generateTodosHTML();
    console.log('‚úÖ Contenido del tab "Todos los Productos" generado');
    
    // ====================================================================================
    // üìã GENERACI√ìN DE CONTENIDO PARA CADA CATEGOR√çA INDIVIDUAL
    // ====================================================================================
    // Object.entries() convierte productosDB.categorias en array de [key, value]
    // map() itera sobre cada categor√≠a y genera su contenido espec√≠fico
    // generateCategoryHTML(key, categoria) crea el contenido completo de cada categor√≠a
    const categoriesHTML = Object.entries(productosDB.categorias).map(([key, categoria]) => {
        console.log(`üîß Generando contenido para categor√≠a: ${key} (${categoria.nombre})`);
        
        // ====================================================================================
        // üìã DESTRUCTURING DE DATOS DE CATEGOR√çA
        // ====================================================================================
        // key: Identificador √∫nico de la categor√≠a (ej: "tortas-cuadradas")
        // categoria: Objeto completo con propiedades:
        //   - nombre: Nombre legible (ej: "Tortas Cuadradas")
        //   - icono: Clase CSS del icono Font Awesome (ej: "fas fa-square")
        //   - productos: Array de productos espec√≠ficos de esta categor√≠a
        
        return generateCategoryHTML(key, categoria);
    }).join(''); // join('') convierte el array de strings en una sola cadena HTML
    
    console.log(`‚úÖ Contenido de ${Object.keys(productosDB.categorias).length} categor√≠as generado`);
    
    // ====================================================================================
    // üìã COMBINACI√ìN Y ESTRUCTURA DE RETORNO
    // ====================================================================================
    // Combina el contenido del tab "Todos" con el contenido de todas las categor√≠as
    // Estructura organizada para inserci√≥n eficiente en DOM
    const resultado = {
        tabs: tabsHTML,                    // HTML de tabs de navegaci√≥n
        categories: todosHTML + categoriesHTML  // HTML de contenido (Todos + Categor√≠as)
    };
    
    console.log('üéØ Generaci√≥n completa de contenido de productos finalizada exitosamente');
    console.log('üìä Resumen:', {
        tabsGenerados: 'Tabs de navegaci√≥n + Tab Todos',
        categoriasGeneradas: Object.keys(productosDB.categorias).length,
        contenidoTotal: 'Tab Todos + Contenido de todas las categor√≠as'
    });
    
    return resultado;
}

// Funci√≥n para inicializar el contenido din√°mico de productos
function initializeDynamicProducts() {
    const productTabs = document.getElementById('productTabs');
    const productTabsContent = document.getElementById('productTabsContent');
    
    if (productTabs && productTabsContent) {
        const content = generateProductsContent();
        
        // Reemplazar tabs
        productTabs.innerHTML = content.tabs;
        
        // Reemplazar contenido de categor√≠as
        productTabsContent.innerHTML = content.categories;
        
        // Configurar botones de cantidad despu√©s de regenerar el HTML
        setupQuantityButtons();
        
        // Configurar listeners de cambio de tabs
        setupTabChangeListeners();
    }
}

/**
 * Configura los inputs de cantidad despu√©s de regenerar el HTML
 */
function setupQuantityButtons() {
    console.log('üîß Setting up quantity inputs...');
    
    // Configurar todos los inputs de cantidad existentes
    const inputs = document.querySelectorAll('input[id^="quantity-"]');
    console.log('üîç Found quantity inputs:', inputs.length);
    
    // Verificar qu√© tab est√° activo
    const activeTab = document.querySelector('.tab-pane.active');
    console.log('üìã Active tab:', activeTab ? activeTab.id : 'none');
    
    inputs.forEach((input, index) => {
        console.log(`Input ${index} configured:`, input.id, input.value);
        
        // Asegurar que el input tenga los atributos correctos
        if (input.id && input.id.startsWith('quantity-')) {
            const productId = input.id.replace('quantity-', '');
            const producto = getProductById(productId);
            if (producto) {
                input.min = 1;
                input.max = producto.stock;
                input.value = input.value || 1;
                console.log(`‚úÖ Input ${productId} configured: min=${input.min}, max=${input.max}, value=${input.value}`);
            }
        }
    });
    
    console.log('Quantity inputs setup complete');
}

/**
 * Configura los inputs de cantidad solo del tab activo
 */
function setupActiveTabQuantityButtons() {
    console.log('üéØ Setting up active tab quantity inputs...');
    
    // Buscar solo los inputs del tab activo
    const activeTab = document.querySelector('.tab-pane.active');
    if (!activeTab) {
        console.log('‚ùå No active tab found');
        return;
    }
    
    const inputs = activeTab.querySelectorAll('input[id^="quantity-"]');
    console.log('üîç Found quantity inputs in active tab:', inputs.length, 'for tab:', activeTab.id);
    
    inputs.forEach((input, index) => {
        console.log(`Input ${index} configured in tab ${activeTab.id}:`, input.id, input.value);
        
        // Asegurar que el input tenga los atributos correctos
        if (input.id && input.id.startsWith('quantity-')) {
            const productId = input.id.replace('quantity-', '');
            const producto = getProductById(productId);
            if (producto) {
                input.min = 1;
                input.max = producto.stock;
                input.value = input.value || 1;
                console.log(`‚úÖ Input ${productId} configured: min=${input.min}, max=${input.max}, value=${input.value}`);
            }
        }
    });
    
    console.log('Active tab quantity inputs setup complete');
}

/**
 * Verifica que los inputs de cantidad est√©n funcionando correctamente
 */
function verifyQuantityInputs() {
    console.log('üîç Verifying quantity inputs...');
    
    const activeTab = document.querySelector('.tab-pane.active');
    if (!activeTab) {
        console.log('‚ùå No active tab found');
        return;
    }
    
    const inputs = activeTab.querySelectorAll('input[id^="quantity-"]');
    console.log(`üìä Found ${inputs.length} inputs in tab ${activeTab.id}`);
    
    inputs.forEach((input, index) => {
        const productId = input.id.replace('quantity-', '');
        console.log(`Input ${index}:`, {
            id: input.id,
            productId: productId,
            value: input.value,
            min: input.min,
            max: input.max,
            visible: input.offsetParent !== null
        });
    });
}

/**
 * Limpia inputs duplicados manteniendo solo los del tab activo
 */
function cleanupDuplicateInputs() {
    console.log('üßπ Cleaning up duplicate inputs...');
    
    const activeTab = document.querySelector('.tab-pane.active');
    if (!activeTab) {
        console.log('‚ùå No active tab found');
        return;
    }
    
    // Obtener todos los inputs de cantidad
    const allInputs = document.querySelectorAll('input[id^="quantity-"]');
    const inputsByProduct = {};
    
    // Agrupar inputs por producto
    allInputs.forEach(input => {
        const productId = input.id.replace('quantity-', '');
        if (!inputsByProduct[productId]) {
            inputsByProduct[productId] = [];
        }
        inputsByProduct[productId].push(input);
    });
    
    // Para cada producto, mantener solo el input del tab activo
    Object.entries(inputsByProduct).forEach(([productId, inputs]) => {
        if (inputs.length > 1) {
            console.log(`üîß Found ${inputs.length} inputs for product ${productId}`);
            
            // Encontrar el input del tab activo
            const activeInput = activeTab.querySelector(`#quantity-${productId}`);
            
            if (activeInput) {
                // Ocultar o remover los otros inputs
                inputs.forEach(input => {
                    if (input !== activeInput) {
                        console.log(`üóëÔ∏è Removing duplicate input for ${productId}`);
                        input.remove();
                    }
                });
            }
        }
    });
    
    console.log('üßπ Cleanup complete');
}

/**
 * Configura los event listeners para el cambio de tabs
 */
function setupTabChangeListeners() {
    console.log('üìë Setting up tab change listeners...');
    
    // Configurar eventos para todos los tabs de productos
    const tabButtons = document.querySelectorAll('#productTabs button[data-bs-toggle="pill"]');
    
    tabButtons.forEach(tabButton => {
        // Remover event listener anterior si existe
        tabButton.removeEventListener('shown.bs.tab', handleTabShown);
        
        // Agregar nuevo event listener
        tabButton.addEventListener('shown.bs.tab', handleTabShown);
    });
    
    console.log('Tab change listeners configured for', tabButtons.length, 'tabs');
}

/**
 * Maneja el evento de mostrar un tab
 */
function handleTabShown(event) {
    console.log('üéØ Tab shown:', event.target.id);
    
    // Configurar botones de cantidad despu√©s de que se muestre el tab
    setTimeout(() => {
        console.log('‚è∞ Configurando botones despu√©s de cambio de tab...');
        cleanupDuplicateInputs();
        setupActiveTabQuantityButtons();
        verifyQuantityInputs();
    }, 200);
}


// Funci√≥n para mostrar detalles del producto en modal
function showProductDetails(productId) {
    const producto = getProductById(productId);
    if (!producto) return;

    // Guardar el ID del producto actual para usar en el modal
    currentModalProductId = productId;

    // Llenar el modal con la informaci√≥n del producto
    document.getElementById('modalProductImage').src = producto.imagen;
    document.getElementById('modalProductTitle').textContent = producto.nombre;
     document.getElementById('modalProductPrice').textContent = `$${producto.precio.toLocaleString('es-CL')}`;
    
    // Mostrar stock en el modal
    const stockElement = document.getElementById('modalProductStock');
    if (stockElement) {
        stockElement.textContent = `${producto.stock} unidades disponibles`;
        stockElement.className = producto.stock === 0 ? 'text-danger' : 
                                 producto.stock < 10 ? 'text-warning' : 'text-success';
    }
    
    // Usar descripci√≥n detallada si existe, sino usar la descripci√≥n normal
    const descripcionModal = producto.descripcionDetallada || producto.descripcion;
    document.getElementById('modalProductDescription').textContent = descripcionModal;
    document.getElementById('modalProductServings').textContent = producto.porciones;
    document.getElementById('modalProductCalories').textContent = producto.calorias;
    document.getElementById('modalProductIngredients').textContent = producto.ingredientes;

    // Mostrar rating
    const ratingHtml = Array.from({length: 5}, (_, i) => 
        `<i class="fas fa-star ${i < Math.floor(producto.rating) ? 'text-warning' : 'text-muted'}"></i>`
    ).join('') + ` <span class="ms-2">${producto.rating}/5 (${producto.reviews} rese√±as)</span>`;
    document.getElementById('modalProductRating').innerHTML = ratingHtml;

    // Mostrar rese√±as
    const reviewsHtml = producto.rese√±as.map(review => 
        `<div class="review-item">
            <div class="d-flex justify-content-between align-items-start mb-2">
                <span class="review-author">${review.autor}</span>
                <span class="review-date">${new Date(review.fecha).toLocaleDateString()}</span>
            </div>
            <div class="mb-2">
                ${Array.from({length: 5}, (_, i) => 
                    `<i class="fas fa-star ${i < review.rating ? 'text-warning' : 'text-muted'}"></i>`
                ).join('')}
            </div>
            <p>${review.comentario}</p>
        </div>`
    ).join('');
    document.getElementById('modalProductReviews').innerHTML = reviewsHtml;

    // Configurar selector de cantidad del modal
    const modalQuantityInput = document.getElementById('modalQuantity');
    modalQuantityInput.value = 1;
    modalQuantityInput.max = producto.stock;

    // Mostrar el modal
    const modal = new bootstrap.Modal(document.getElementById('productModal'));
    modal.show();
    
}


// Funci√≥n para manejar navegaci√≥n de productos desde navbar
function handleProductNavigation(categoryKey) {
    const productosSection = document.getElementById('productos');
    if (!productosSection) return;

    // Si estamos en la p√°gina de productos, hacer scroll y activar tab
    if (window.location.pathname.includes('index.html') || window.location.pathname === '/') {
        productosSection.scrollIntoView({ behavior: 'smooth' });
        
        // Activar el tab correspondiente
        setTimeout(() => {
            const tabButton = document.getElementById(`${categoryKey}-tab`);
            if (tabButton) {
                const tab = new bootstrap.Tab(tabButton);
                tab.show();
            }
        }, 500);
    } else {
        // Si estamos en otra p√°gina, redirigir a index con hash
        window.location.href = `index.html#productos-${categoryKey}`;
    }
}

// Funci√≥n para manejar hash de URL al cargar la p√°gina
function handleUrlHash() {
    const hash = window.location.hash;
    if (hash && hash.startsWith('#productos-')) {
        const categoryKey = hash.replace('#productos-', '');
        setTimeout(() => {
            handleProductNavigation(categoryKey);
        }, 1000);
    } else if (hash === '#productos' || hash === '#productos-todos') {
        // Si el hash es solo #productos o #productos-todos, mostrar el tab "todos"
        setTimeout(() => {
            const productosSection = document.getElementById('productos');
            if (productosSection) {
                productosSection.scrollIntoView({ behavior: 'smooth' });
                setTimeout(() => {
                    const tabButton = document.getElementById('todos-tab');
                    if (tabButton) {
                        const tab = new bootstrap.Tab(tabButton);
                        tab.show();
                    }
                }, 500);
            }
        }, 1000);
    }
}

// ========================================
// FUNCIONES DEL CARRITO
// ========================================

/**
 * Agrega un producto al carrito
 * @param {string} productId - ID del producto
 * @param {number} quantity - Cantidad a agregar
 */
// ====================================================================================
// üìã SECCI√ìN 4: FUNCIONES DEL CARRITO DE COMPRAS
// ====================================================================================

/**
 * ====================================================================================
 * üõí AGREGAR PRODUCTO AL CARRITO DE COMPRAS
 * ====================================================================================
 * 
 * Esta funci√≥n es el coraz√≥n del sistema de carrito. Agrega productos al carrito
 * con validaciones de stock, manejo de cantidades y persistencia autom√°tica.
 * 
 * üéØ PROP√ìSITO:
 * - Agregar productos al carrito de compras
 * - Validar stock disponible
 * - Manejar cantidades de productos
 * - Persistir cambios en localStorage
 * - Proporcionar feedback visual al usuario
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 
 * PASO 1: VALIDACI√ìN DE PRODUCTO
 * - Busca el producto por ID
 * - Si no existe ‚Üí Termina la funci√≥n
 * 
 * PASO 2: OBTENCI√ìN DE CANTIDAD
 * - Busca el input de cantidad en el tab activo
 * - Usa cantidad proporcionada o valor del input
 * - Fallback a cantidad 1 si no se encuentra
 * 
 * PASO 3: VALIDACI√ìN DE STOCK
 * - Verifica que el producto tenga stock disponible
 * - Valida que la cantidad no exceda el stock
 * - Muestra notificaciones de error si es necesario
 * 
 * PASO 4: MANEJO DE PRODUCTO EXISTENTE
 * - Si el producto ya est√° en el carrito ‚Üí Suma cantidades
 * - Si no est√° en el carrito ‚Üí Agrega nuevo item
 * 
 * PASO 5: ACTUALIZACI√ìN DE INTERFAZ
 * - Actualiza contador del carrito
 * - Guarda cambios en localStorage
 * - Actualiza modal del carrito
 * - Muestra notificaci√≥n de √©xito
 * 
 * üìã PAR√ÅMETROS:
 * - productId: ID √∫nico del producto (string)
 * - quantity: Cantidad a agregar (number, opcional)
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Validaci√≥n robusta de stock
 * - Manejo inteligente de cantidades
 * - Persistencia autom√°tica en localStorage
 * - Feedback visual inmediato
 * - Logging detallado para debugging
 * - Manejo de productos duplicados
 * 
 * üìÑ USADO EN:
 * - Botones "Agregar al Carrito" en tarjetas de productos
 * - Modal de detalles de productos
 * - Botones de cantidad con +/-
 * 
 * @param {string} productId - ID √∫nico del producto
 * @param {number} quantity - Cantidad a agregar (opcional)
 */
function addToCart(productId, quantity = null) {
    // ====================================================================================
    // PASO 1: VALIDACI√ìN DE PRODUCTO
    // ====================================================================================
    console.log('üõí addToCart called:', productId, 'quantity param:', quantity);
    const producto = getProductById(productId);
    if (!producto) {
        console.log('‚ùå Producto not found:', productId);
        return;
    }

    // ====================================================================================
    // PASO 2: OBTENCI√ìN DE CANTIDAD DESDE TAB ACTIVO
    // ====================================================================================
    const activeTab = document.querySelector('.tab-pane.active');
    const inputElement = activeTab ? 
        activeTab.querySelector(`#quantity-${productId}`) : 
        document.getElementById(`quantity-${productId}`);
    
    const inputValue = inputElement ? inputElement.value : 'not found';
    const cantidad = quantity || parseInt(inputValue) || 1;
    
    console.log('üìä Active tab:', activeTab?.id);
    console.log('üìä Input element:', inputElement);
    console.log('üìä Input value:', inputValue);
    console.log('üìä Final cantidad:', cantidad);
    
    // ====================================================================================
    // PASO 3: VERIFICACI√ìN DE INPUTS DUPLICADOS
    // ====================================================================================
    const allInputs = document.querySelectorAll(`#quantity-${productId}`);
    if (allInputs.length > 1) {
        console.log('‚ö†Ô∏è WARNING: Found', allInputs.length, 'inputs with same ID:', productId);
        allInputs.forEach((input, index) => {
            console.log(`Input ${index}:`, input.value, input.offsetParent ? 'visible' : 'hidden');
        });
    }
    
    // ====================================================================================
    // PASO 4: VALIDACI√ìN DE STOCK
    // ====================================================================================
    if (producto.stock === 0) {
        showCartNotification('Este producto no est√° disponible', 'error');
        return;
    }
    
    if (cantidad > producto.stock) {
        showCartNotification(`Solo hay ${producto.stock} unidades disponibles`, 'error');
        return;
    }

    // ====================================================================================
    // PASO 5: MANEJO DE PRODUCTO EXISTENTE O NUEVO
    // ====================================================================================
    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        // Verificar si al agregar m√°s cantidad no excede el stock
        if (existingItem.cantidad + cantidad > producto.stock) {
            showCartNotification(`Solo puedes agregar ${producto.stock - existingItem.cantidad} unidades m√°s`, 'warning');
            return;
        }
        console.log('‚ûï Adding to existing item:', existingItem.cantidad, '+', cantidad, '=', existingItem.cantidad + cantidad);
        existingItem.cantidad += cantidad;
    } else {
        console.log('üÜï Adding new item to cart:', cantidad, 'units');
        cart.push({
            id: productId,
            nombre: producto.nombre,
            precio: producto.precio,
            cantidad: cantidad,
            imagen: producto.imagen
        });
    }

    // ====================================================================================
    // PASO 6: ACTUALIZACI√ìN DE INTERFAZ Y PERSISTENCIA
    // ====================================================================================
    updateCartCounter();
    saveCartToStorage();
    updateCartModal();
    showCartNotification(`${producto.nombre} agregado al carrito`, 'success');
}

/**
 * Muestra notificaci√≥n del carrito
 * @param {string} message - Mensaje a mostrar
 * @param {string} type - Tipo de notificaci√≥n (success, error, warning)
 */
function showCartNotification(message, type = 'success') {
    // Crear toast si no existe
    let toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toastContainer';
        toastContainer.className = 'toast-container position-fixed top-0 start-0 p-3';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);
    }

    const toastId = 'toast-' + Date.now();
    const bgClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : 'bg-warning';
    const icon = type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-exclamation-triangle';

    toastContainer.innerHTML += `
        <div class="toast ${bgClass} text-white" id="${toastId}" role="alert">
            <div class="toast-header ${bgClass} text-white border-0">
                <i class="fas ${icon} me-2"></i>
                <strong class="me-auto">Carrito</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        </div>
    `;

    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement);
    toast.show();

    // Remover el toast del DOM despu√©s de que se oculte
    toastElement.addEventListener('hidden.bs.toast', () => {
        toastElement.remove();
    });
}


/**
 * Cambia la cantidad en el modal
 * @param {number} change - Cambio en la cantidad (+1 o -1)
 */
function changeModalQuantity(change) {
    const input = document.getElementById('modalQuantity');
    if (!input) return;

    let newValue = parseInt(input.value) + change;
    newValue = Math.max(1, Math.min(newValue, parseInt(input.max)));
    input.value = newValue;
}

/**
 * Elimina un producto del carrito
 * @param {string} productId - ID del producto a eliminar
 */
function removeFromCart(productId) {
    const index = cart.findIndex(item => item.id === productId);
    if (index !== -1) {
        const producto = cart[index];
        cart.splice(index, 1);
        updateCartCounter();
        saveCartToStorage();
        updateCartModal();
        showCartNotification(`${producto.nombre} eliminado del carrito`, 'info');
    }
}

/**
 * Obtiene el carrito completo
 * @returns {Array} Array con todos los productos del carrito
 */
function getCart() {
    return cart;
}

/**
 * Limpia todo el carrito
 */
function clearCart() {
    cart = [];
    updateCartCounter();
    saveCartToStorage();
    showCartNotification('Carrito vaciado', 'info');
    updateCartModal();
}

/**
 * Muestra el modal del carrito
 */
function showCartModal() {
    updateCartModal();
    const modal = new bootstrap.Modal(document.getElementById('cartModal'));
    modal.show();
}


/**
 * Actualiza el contenido del modal del carrito
 */
function updateCartModal() {
    const cartItemsList = document.getElementById('cartItemsList');
    const cartEmptyMessage = document.getElementById('cartEmptyMessage');
    const cartModalTotal = document.getElementById('cartModalTotal');
    const clearCartBtn = document.getElementById('clearCartBtn');
    const checkoutBtn = document.getElementById('checkoutBtn');
    
    if (!cartItemsList || !cartEmptyMessage || !cartModalTotal || !clearCartBtn || !checkoutBtn) return;
    
    // Calcular total
    const totalPrice = cart.reduce((sum, item) => sum + (item.precio * item.cantidad), 0);
    cartModalTotal.textContent = `$${totalPrice.toLocaleString('es-CL')}`;
    
    if (cart.length === 0) {
        // Carrito vac√≠o
        cartItemsList.style.display = 'none';
        cartEmptyMessage.style.display = 'block';
        clearCartBtn.style.display = 'none';
        checkoutBtn.style.display = 'none';
    } else {
        // Carrito con productos
        cartItemsList.style.display = 'block';
        cartEmptyMessage.style.display = 'none';
        clearCartBtn.style.display = 'inline-block';
        checkoutBtn.style.display = 'inline-block';
        
        // Generar HTML de los productos
        cartItemsList.innerHTML = cart.map(item => `
            <div class="cart-item d-flex align-items-center mb-3 p-3 border rounded">
                <img src="${item.imagen}" alt="${item.nombre}" class="cart-item-image me-3" style="width: 60px; height: 60px; object-fit: cover; border-radius: 8px;">
                <div class="flex-grow-1">
                    <h6 class="mb-1">${item.nombre}</h6>
                    <p class="text-muted mb-1">$${item.precio.toLocaleString('es-CL')} c/u</p>
                    <div class="d-flex align-items-center">
                        <button class="btn btn-sm btn-outline-secondary" onclick="changeCartItemQuantity('${item.id}', -1)">
                            <i class="fas fa-minus"></i>
                        </button>
                        <span class="mx-2 fw-bold">${item.cantidad}</span>
                        <button class="btn btn-sm btn-outline-secondary" onclick="changeCartItemQuantity('${item.id}', 1)">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                <div class="text-end">
                    <div class="fw-bold mb-1">$${(item.precio * item.cantidad).toLocaleString('es-CL')}</div>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeFromCart('${item.id}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('');
    }
}

/**
 * Cambia la cantidad de un producto en el carrito
 * @param {string} productId - ID del producto
 * @param {number} change - Cambio en la cantidad (+1 o -1)
 */
function changeCartItemQuantity(productId, change) {
    const item = cart.find(item => item.id === productId);
    if (!item) return;
    
    const producto = getProductById(productId);
    if (!producto) return;
    
    let newQuantity = item.cantidad + change;
    
    // Validar l√≠mites
    if (newQuantity <= 0) {
        removeFromCart(productId);
        return;
    }
    
    if (newQuantity > producto.stock) {
        showCartNotification(`Solo hay ${producto.stock} unidades disponibles`, 'error');
        return;
    }
    
    item.cantidad = newQuantity;
    updateCartCounter();
    saveCartToStorage();
    updateCartModal();
}

/**
 * Actualiza el contador del carrito
 */
function updateCartCounter() {
        const totalItems = cart.reduce((sum, item) => sum + item.cantidad, 0);
        const totalPrice = cart.reduce((sum, item) => sum + (item.precio * item.cantidad), 0);
        
    // Actualizar contador desktop
    const counter = document.getElementById('cartCounter');
    if (counter) {
        counter.textContent = totalItems;
        counter.style.display = totalItems > 0 ? 'block' : 'none';
    }
    
    // Actualizar contador m√≥vil
    const counterMobile = document.getElementById('cartCounterMobile');
    if (counterMobile) {
        counterMobile.textContent = totalItems;
        counterMobile.style.display = totalItems > 0 ? 'block' : 'none';
    }
    
    // Actualizar precio total desktop
        const priceElement = document.getElementById('cartTotalPrice');
        if (priceElement) {
        priceElement.textContent = `Carrito $${totalPrice.toLocaleString('es-CL')}`;
        }
    
    // Actualizar precio total m√≥vil
    const priceElementMobile = document.getElementById('cartTotalPriceMobile');
    if (priceElementMobile) {
        priceElementMobile.textContent = `Carrito $${totalPrice.toLocaleString('es-CL')}`;
    }
}

// ========================================
// FUNCIONES DE NAVEGACI√ìN
// ========================================


// Inicializar productos cuando se carga el DOM
document.addEventListener('DOMContentLoaded', async function() {
    // Cargar base de datos de productos desde JSON
    try {
        await loadProductosDB();
    } catch (error) {
        console.error('‚ùå No se pudo cargar la base de datos de productos:', error);
        return; // Salir si no se puede cargar la base de datos
    }
    
    // Cargar carrito desde localStorage
    loadCartFromStorage();
    
    // Actualizar contador del carrito en todas las p√°ginas
    updateCartCounter();
    
    // Configurar evento para el bot√≥n de agregar al carrito del modal
    const modalAddToCartBtn = document.getElementById('modalAddToCart');
    if (modalAddToCartBtn) {
        modalAddToCartBtn.addEventListener('click', function() {
            if (currentModalProductId) {
                const quantity = parseInt(document.getElementById('modalQuantity').value) || 1;
                addToCart(currentModalProductId, quantity);
                
                // Cerrar el modal despu√©s de agregar
                const modal = bootstrap.Modal.getInstance(document.getElementById('productModal'));
                if (modal) {
                    modal.hide();
                }
            }
        });
    }
    
    // Solo inicializar si estamos en la p√°gina de productos
    if (document.getElementById('productos')) {
        initializeDynamicProducts();
        handleUrlHash();
        
        // Configurar eventos de navegaci√≥n de productos
        document.querySelectorAll('[data-category]').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const categoryKey = this.getAttribute('data-category');
                handleProductNavigation(categoryKey);
            });
        });
        
        // Configurar evento para el enlace principal de "Productos"
        document.querySelectorAll('a[href="#productos"]').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const productosSection = document.getElementById('productos');
                if (productosSection) {
                    productosSection.scrollIntoView({ behavior: 'smooth' });
                    setTimeout(() => {
                        const tabButton = document.getElementById('todos-tab');
                        if (tabButton) {
                            const tab = new bootstrap.Tab(tabButton);
                            tab.show();
                        }
                    }, 500);
                }
            });
        });
        
        // Configurar eventos de cambio de tabs para configurar botones de cantidad
        setupTabChangeListeners();
    }
});

/**
 * ====================================================================================
 * üéØ RESUMEN FINAL DEL ARCHIVO DE PRODUCTOS
 * ====================================================================================
 * 
 * Este archivo es el coraz√≥n del sistema de e-commerce de la aplicaci√≥n, centralizando
 * toda la l√≥gica relacionada con productos, carrito de compras y navegaci√≥n.
 * 
 * üìã FUNCIONALIDADES PRINCIPALES:
 * - Base de datos de productos con categor√≠as
 * - Sistema de carrito con persistencia en localStorage
 * - Modales de detalles de productos
 * - Navegaci√≥n entre categor√≠as con tabs
 * - Notificaciones toast para feedback del usuario
 * - Gesti√≥n de cantidad de productos
 * - Filtrado de productos por precio
 * - Generaci√≥n din√°mica de contenido
 * 
 * üìã FUNCIONES PRINCIPALES:
 * - getAllProducts(): Obtiene todos los productos indexados por ID
 * - getProductById(): Busca producto espec√≠fico por ID
 * - getProductsByCategory(): Obtiene productos de categor√≠a espec√≠fica
 * - addToCart(): Agrega productos al carrito con validaciones
 * - showProductDetails(): Muestra modal de detalles de producto
 * - updateCartCounter(): Actualiza contador del carrito
 * - generateProductsContent(): Genera contenido din√°mico de productos
 * - setupQuantityButtons(): Configura botones de cantidad
 * 
 * ‚ö° CARACTER√çSTICAS DEL ARCHIVO:
 * - Sistema de carrito persistente
 * - Navegaci√≥n fluida entre categor√≠as
 * - Modales responsivos con Bootstrap
 * - Notificaciones toast para feedback
 * - Gesti√≥n de cantidad con botones +/-
 * - Integraci√≥n con sistema de componentes
 * - Validaci√≥n robusta de stock
 * - Manejo inteligente de cantidades
 * 
 * üìÑ ARCHIVOS RELACIONADOS:
 * - index.html: P√°gina principal con secci√≥n de productos
 * - components/navbar.html: Navegaci√≥n con dropdown de categor√≠as
 * - components/cart-modal.html: Modal del carrito de compras
 * - js/components.js: Sistema de componentes y navegaci√≥n
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Carga productos desde base de datos local
 * 2. Inicializa carrito desde localStorage
 * 3. Configura event listeners para interacciones
 * 4. Maneja navegaci√≥n entre categor√≠as
 * 5. Gestiona agregar/quitar productos del carrito
 * 6. Persiste cambios en localStorage
 * 7. Actualiza interfaz de usuario en tiempo real
 */
console.log('‚úÖ productos.js cargado correctamente - Sistema de productos y carrito disponible');
