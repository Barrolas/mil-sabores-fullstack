// ========================================
// COMPONENTS - Pasteler√≠a Mil Sabores
// Sistema h√≠brido de componentes HTML
// ========================================

/**
 * OBJETO DE COMPONENTES EMBEBIDOS - SISTEMA DE FALLBACK
 * 
 * Este objeto contiene el HTML completo de todos los componentes como strings,
 * que se usan como respaldo cuando el sistema de fetch() falla.
 * 
 * üéØ PROP√ìSITO:
 * - Proporcionar respaldo autom√°tico cuando fetch() no puede cargar archivos HTML
 * - Resolver problemas de CORS (Cross-Origin Resource Sharing) en archivos locales
 * - Asegurar que los componentes siempre se carguen, sin importar el entorno
 * - Permitir desarrollo sin servidor local
 * 
 * üîÑ FUNCIONAMIENTO:
 * - Cuando loadComponent() intenta cargar un archivo HTML y falla
 * - Autom√°ticamente usa el HTML embebido correspondiente
 * - El usuario nunca nota la diferencia, la experiencia es id√©ntica
 * 
 * üìã COMPONENTES INCLUIDOS:
 * - navbar: Barra de navegaci√≥n completa con logo, men√∫s y carrito
 * - cart-modal: Modal del carrito de compras con funcionalidad completa
 * - footer: Pie de p√°gina con informaci√≥n de copyright y dise√±o
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - HTML completo y funcional embebido en JavaScript
 * - Id√©ntico al contenido de los archivos HTML correspondientes
 * - Se mantiene sincronizado manualmente con los archivos
 * - Proporciona experiencia de usuario consistente
 */
const embeddedComponents = {
    /**
     * COMPONENTE NAVBAR EMBEBIDO
     * 
     * Contiene el HTML completo de la barra de navegaci√≥n principal.
     * Incluye logo, men√∫s de navegaci√≥n, dropdown de productos y carrito.
     * 
     * üìã ELEMENTOS INCLUIDOS:
     * - Logo de la pasteler√≠a con enlace a index.html
     * - Nombre de la pasteler√≠a (visible solo en m√≥vil/tablet)
     * - Men√∫ de navegaci√≥n principal (Inicio, Productos)
     * - Dropdown de categor√≠as de productos
     * - Iconos de carrito con contador din√°mico
     * - Enlaces de login y registro
     * 
     * üé® ESTILOS:
     * - Bootstrap 5.3.0 para responsividad
     * - Sticky-top para navegaci√≥n fija
     * - Shadow-sm para efecto de elevaci√≥n
     * - Colores personalizados (text-pink)
     */
    navbar: `
<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm sticky-top">
    <div class="container-fluid px-4">
        <div class="row w-100 align-items-center">
            <!-- Logo -->
            <div class="col-auto px-3">
                <a class="navbar-brand d-flex align-items-center" href="index.html">
                    <img src="assets/images/logo-milsabores.png" alt="Mil Sabores Logo" class="me-2"
                        style="width: 102px;">
                </a>
            </div>

            <!-- Nombre de la pasteler√≠a - Solo visible en m√≥vil/tablet -->
            <div class="col d-lg-none text-center">
                <h5 class="mb-0 fw-bold text-dark">Mil Sabores</h5>
                <small class="text-pink">Pasteler√≠a</small>
            </div>

            <!-- Dropdown de categorias -->
            <div class="col-auto px-3 d-none d-lg-block">
                <ul class="navbar-nav d-flex flex-row">
                    <li class="nav-item me-4">
                        <a class="nav-link fw-medium px-2" href="index.html">Inicio</a>
                    </li>
                    <li class="nav-item dropdown me-4">
                        <a class="nav-link dropdown-toggle fw-medium px-2" href="#" id="productosDropdown"
                            role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Productos
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="productosDropdown">
                            <li><a class="dropdown-item" href="#">Tortas Cuadradas</a></li>
                            <li><a class="dropdown-item" href="#">Tortas Circulares</a></li>
                            <li><a class="dropdown-item" href="#">Postres Individuales</a></li>
                            <li><a class="dropdown-item" href="#">Productos Sin Az√∫car</a></li>
                            <li><a class="dropdown-item" href="#">Pasteler√≠a Tradicional</a></li>
                            <li><a class="dropdown-item" href="#">Productos sin gluten</a></li>
                            <li><a class="dropdown-item" href="#">Productos Vegana</a></li>
                            <li><a class="dropdown-item" href="#">Tortas Especiales</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link fw-medium px-2" href="#">Sobre Nosotros</a>
                    </li>
                </ul>
            </div>

            <!-- Search Bar -->
            <div class="col px-4 d-none d-lg-block">
                <div class="position-relative">
                    <i
                        class="fas fa-search position-absolute top-50 start-0 translate-middle-y ms-3 text-pink"></i>
                    <input type="text" class="form-control ps-5 border-pink bg-white search-input"
                        placeholder="Buscar..." style="border-radius: 25px;">
                </div>
            </div>

            <!-- User and Cart -->
            <div class="col-auto px-3 d-none d-lg-block">
                <div class="d-flex align-items-center gap-4">
                    <!-- Mi Cuenta Dropdown -->
                    <div class="dropdown">
                        <div class="d-flex flex-column align-items-center px-2 dropdown-toggle"
                            id="miCuentaDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false"
                            style="cursor: pointer;">
                            <i class="fas fa-user text-pink"></i>
                            <small class="text-dark fw-medium">Mi cuenta</small>
                        </div>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="miCuentaDropdown">
                            <li>
                                <a class="dropdown-item" href="login.html">
                                    <i class="fas fa-sign-in-alt me-2"></i>Iniciar sesi√≥n
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="registro.html">
                                    <i class="fas fa-user-plus me-2"></i>Crear una cuenta
                                </a>
                            </li>
                        </ul>
                    </div>

                    <!-- Carrito -->
                    <div class="d-flex flex-column align-items-center px-2 position-relative" style="cursor: pointer;" onclick="showCartModal()">
                        <i class="fas fa-shopping-cart text-pink"></i>
                        <small class="text-dark fw-medium" id="cartTotalPrice">Carrito $0</small>
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="cartCounter" style="display: none;">0</span>
                    </div>
                </div>
            </div>

            <!-- Hamburger Button -->
            <div class="col-auto d-lg-none px-3">
                <button class="navbar-toggler border-0" type="button" data-bs-toggle="offcanvas"
                    data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar"
                    aria-label="Toggle navigation">
                    <span class="hamburger-line"></span>
                    <span class="hamburger-line"></span>
                    <span class="hamburger-line"></span>
                </button>
            </div>
        </div>
    </div>
</nav>

<!-- Offcanvas Menu -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
    <div class="offcanvas-header border-bottom">
        <h5 class="offcanvas-title" id="offcanvasNavbarLabel">
            <img src="assets/images/logo-milsabores.png" alt="Mil Sabores Logo" style="width: 60px;">
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <!-- Navigation Links -->
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link fw-medium py-3" href="index.html">Inicio</a>
            </li>
            <li class="nav-item">
                <a class="nav-link fw-medium py-3" href="#" data-bs-toggle="collapse"
                    data-bs-target="#productosCollapse" aria-expanded="false" aria-controls="productosCollapse">
                    Productos <i class="fas fa-chevron-down float-end"></i>
                </a>
                <div class="collapse" id="productosCollapse">
                    <ul class="list-unstyled ps-3">
                        <li><a class="nav-link py-2 text-muted" href="#">Tortas Cuadradas</a></li>
                        <li><a class="nav-link py-2 text-muted" href="#">Tortas Circulares</a></li>
                        <li><a class="nav-link py-2 text-muted" href="#">Postres Individuales</a></li>
                        <li><a class="nav-link py-2 text-muted" href="#">Productos Sin Az√∫car</a></li>
                        <li><a class="nav-link py-2 text-muted" href="#">Pasteler√≠a Tradicional</a></li>
                        <li><a class="nav-link py-2 text-muted" href="#">Productos sin gluten</a></li>
                        <li><a class="nav-link py-2 text-muted" href="#">Productos Vegana</a></li>
                        <li><a class="nav-link py-2 text-muted" href="#">Tortas Especiales</a></li>
                    </ul>
                </div>
            </li>
            <li class="nav-item">
                <a class="nav-link fw-medium py-3" href="#">Sobre Nosotros</a>
            </li>
        </ul>

        <!-- Search Bar - Mobile -->
        <div class="mt-4">
            <div class="position-relative">
                <i
                    class="fas fa-search position-absolute top-50 start-0 translate-middle-y ms-3 text-pink"></i>
                <input type="text" class="form-control ps-5 border-pink bg-white search-input"
                    placeholder="Buscar..." style="border-radius: 25px;">
            </div>
        </div>

        <!-- User and Cart - Mobile -->
        <div class="mt-4 d-flex flex-column gap-3">
            <!-- Mi Cuenta - Mobile -->
            <div class="d-flex flex-column gap-2">
                <div class="d-flex align-items-center gap-3 p-3 bg-light rounded">
                    <i class="fas fa-user text-pink"></i>
                    <span class="fw-medium">Mi cuenta</span>
                </div>
                <div class="ps-3 d-flex flex-column gap-2">
                    <a href="login.html" class="btn btn-primary btn-sm">
                        <i class="fas fa-sign-in-alt me-2"></i>Iniciar sesi√≥n
                    </a>
                    <a href="registro.html" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-user-plus me-2"></i>Crear una cuenta
                    </a>
                </div>
            </div>

            <!-- Carrito - Mobile -->
            <div class="d-flex align-items-center gap-3 p-3 bg-light rounded position-relative" style="cursor: pointer;" onclick="showCartModal()">
                <i class="fas fa-shopping-cart text-pink"></i>
                <span class="fw-medium" id="cartTotalPriceMobile">Carrito $0</span>
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="cartCounterMobile" style="display: none;">0</span>
            </div>
        </div>
    </div>
</div>`,

    /**
     * COMPONENTE CART-MODAL EMBEBIDO
     * 
     * Contiene el HTML completo del modal del carrito de compras.
     * Incluye funcionalidad completa para ver, gestionar y modificar productos.
     * 
     * üìã ELEMENTOS INCLUIDOS:
     * - Header del modal con t√≠tulo y bot√≥n de cerrar
     * - Body con lista din√°mica de productos del carrito
     * - Mensaje cuando el carrito est√° vac√≠o
     * - Footer con total, botones de acci√≥n y cerrar
     * - Bot√≥n "Vaciar Carrito" para limpiar todo
     * - Bot√≥n "Ir a Pagar" (visual, sin funcionalidad)
     * 
     * üé® ESTILOS:
     * - Bootstrap 5.3.0 para dise√±o responsivo
     * - Modal-lg para tama√±o grande
     * - Iconos Font Awesome para elementos visuales
     * - Badges para contadores din√°micos
     * 
     * ‚ö° FUNCIONALIDAD:
     * - Se llena din√°micamente con productos del carrito
     * - Muestra total calculado autom√°ticamente
     * - Permite eliminar productos individuales
     * - Integrado con localStorage para persistencia
     */
    cartModal: `
<!-- Modal del Carrito -->
<div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cartModalLabel">
                    <i class="fas fa-shopping-cart me-2"></i>Mi Carrito
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Lista de productos del carrito -->
                <div id="cartItemsList">
                    <!-- Los productos se cargar√°n din√°micamente aqu√≠ -->
                </div>
                
                <!-- Mensaje cuando el carrito est√° vac√≠o -->
                <div id="cartEmptyMessage" class="text-center py-5" style="display: none;">
                    <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Tu carrito est√° vac√≠o</h5>
                    <p class="text-muted">Agrega algunos productos para comenzar</p>
                </div>
            </div>
            <div class="modal-footer">
                <div class="d-flex justify-content-between align-items-center w-100">
                    <div>
                        <strong>Total: <span id="cartModalTotal">$0</span></strong>
                    </div>
                    <div>
                        <button type="button" class="btn btn-outline-danger me-2" onclick="clearCart()" id="clearCartBtn" style="display: none;">
                            <i class="fas fa-trash me-1"></i>Vaciar Carrito
                        </button>
                        <button type="button" class="btn btn-success me-2" id="checkoutBtn" style="display: none;">
                            <i class="fas fa-credit-card me-1"></i>Ir a Pagar
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>`,

    /**
     * COMPONENTE FOOTER EMBEBIDO
     * 
     * Contiene el HTML completo del pie de p√°gina de la aplicaci√≥n.
     * Incluye informaci√≥n de copyright y mensaje de la empresa.
     * 
     * üìã ELEMENTOS INCLUIDOS:
     * - Informaci√≥n de copyright de la pasteler√≠a
     * - Mensaje de "Hecho con amor para nuestros clientes"
     * - Icono de coraz√≥n para el mensaje emocional
     * - Dise√±o responsivo con Bootstrap Grid
     * 
     * üé® ESTILOS:
     * - Bootstrap 5.3.0 para dise√±o responsivo
     * - bg-light para fondo claro
     * - py-4 para padding vertical
     * - mt-5 para margen superior
     * - text-muted para texto secundario
     * - text-danger para icono de coraz√≥n
     * 
     * ‚ö° CARACTER√çSTICAS:
     * - Dise√±o simple y limpio
     * - Responsive (se adapta a m√≥vil y desktop)
     * - Mensaje emocional de la marca
     * - Informaci√≥n legal b√°sica
     */
    footer: `
<!-- Footer -->
<footer class="bg-light py-4 mt-5">
    <div class="container">
        <div class="row">
            <div class="col-md-6 text-center text-md-start">
                <p class="mb-0 text-muted">
                    ¬© 2024 Pasteler√≠a Mil Sabores. Todos los derechos reservados.
                </p>
            </div>
            <div class="col-md-6 text-center text-md-end">
                <p class="mb-0 text-muted">
                    <i class="fas fa-heart text-danger me-1"></i>
                    Hecho con amor para nuestros clientes
                </p>
            </div>
        </div>
    </div>
</footer>`
}; // ‚Üê CIERRE DEL OBJETO embeddedComponents

/**
 * ========================================
 * FUNCIONES DEL SISTEMA DE COMPONENTES
 * ========================================
 * 
 * A partir de aqu√≠ comienzan las funciones que utilizan el objeto
 * embeddedComponents para cargar componentes din√°micamente en las p√°ginas.
 */

/**
 * SISTEMA H√çBRIDO DE COMPONENTES HTML
 * 
 * Esta funci√≥n implementa un sistema inteligente de carga de componentes con dos estrategias:
 * 
 * üéØ ESTRATEGIA 1: CARGA DESDE ARCHIVO (PREFERIDA)
 * - Intenta cargar desde: components/navbar.html, components/footer.html, etc.
 * - Ventaja: Archivos separados, f√°cil mantenimiento
 * - Problema: CORS bloquea fetch() de archivos locales en algunos navegadores
 * 
 * üõ°Ô∏è ESTRATEGIA 2: FALLBACK EMBEBIDO (RESPALDO)
 * - Si el archivo falla, usa el HTML embebido en embeddedComponents
 * - Ventaja: Siempre funciona, sin problemas de CORS
 * - Desventaja: HTML duplicado en el c√≥digo JavaScript
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Busca el contenedor en el HTML (ej: <div id="navbar-container">)
 * 2. Intenta fetch('components/navbar.html')
 * 3. Si funciona: Inserta el HTML del archivo
 * 4. Si falla: Usa embeddedComponents.navbar
 * 5. Si ambos fallan: Muestra error
 * 
 * üìã COMPONENTES DISPONIBLES:
 * - navbar: Barra de navegaci√≥n completa
 * - footer: Pie de p√°gina simple
 * - cart-modal: Modal del carrito de compras
 * 
 * @param {string} componentName - Nombre del componente ('navbar', 'footer', 'cart-modal')
 * @param {string} containerId - ID del div donde insertar el componente
 */
async function loadComponent(componentName, containerId) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error(`‚ùå Contenedor ${containerId} no encontrado`);
        return;
    }

    try {
        // Intentar cargar desde archivo HTML
        const response = await fetch(`components/${componentName}.html`);
        if (response.ok) {
            const html = await response.text();
            container.innerHTML = html;
            console.log(`‚úÖ Componente ${componentName} cargado desde archivo HTML`);
        } else {
            throw new Error(`Archivo no encontrado: ${response.status}`);
        }
    } catch (error) {
        // Fallback a componente embebido
        console.warn(`‚ö†Ô∏è No se pudo cargar ${componentName}.html, usando componente embebido:`, error.message);

        if (embeddedComponents[componentName]) {
            container.innerHTML = embeddedComponents[componentName];
            console.log(`‚úÖ Componente ${componentName} cargado desde fallback embebido`);
        } else {
            console.error(`‚ùå Componente ${componentName} no encontrado ni en archivo ni en fallback`);
        }
    }
}

/**
 * ====================================================================================
 * üìã FASE 2 DEL PROCESO PRINCIPAL - CARGA DE COMPONENTES BASE
 * ====================================================================================
 * 
 * Esta funci√≥n es la FASE 2 del PROCESO PRINCIPAL. Se ejecuta autom√°ticamente
 * cuando se detectan contenedores de componentes y carga los elementos base
 * en todas las p√°ginas de la aplicaci√≥n.
 * 
 * üéØ PROP√ìSITO EN EL PROCESO:
 * - Cargar navbar, carrito y footer en todas las p√°ginas
 * - Mantener consistencia visual en toda la aplicaci√≥n
 * - Permitir acceso al carrito desde cualquier p√°gina
 * - Preparar la base para la FASE 3 (Configuraci√≥n de navegaci√≥n)
 * 
 * üîÑ FLUJO DENTRO DEL PROCESO PRINCIPAL:
 * 
 * PASO 2.1: INICIO DE CARGA
 * - Se llama autom√°ticamente desde el event listener DOMContentLoaded
 * - Solo se ejecuta si existen contenedores de componentes
 * 
 * PASO 2.2: CARGA SECUENCIAL DE COMPONENTES
 * - Carga navbar (navegaci√≥n principal) usando loadComponent()
 * - Carga modal del carrito (funcionalidad de compras) usando loadComponent()
 * - Carga footer (informaci√≥n de la empresa) usando loadComponent()
 * 
 * PASO 2.3: FINALIZACI√ìN DE FASE
 * - Muestra confirmaci√≥n de carga completa
 * - Prepara para la FASE 3 (Configuraci√≥n de navegaci√≥n)
 * 
 * üìã COMPONENTES QUE CARGA:
 * - navbar: Barra de navegaci√≥n con logo, men√∫s y carrito
 * - cart-modal: Modal para ver y gestionar productos en el carrito
 * - footer: Pie de p√°gina con informaci√≥n de copyright
 * 
 * üìÑ P√ÅGINAS QUE USAN ESTA FUNCI√ìN:
 * - index.html: P√°gina principal
 * - login.html: P√°gina de inicio de sesi√≥n
 * - registro.html: P√°gina de registro de usuario
 * 
 * ‚ö° CARACTER√çSTICAS DEL PROCESO:
 * - Funci√≥n async/await para cargar componentes en secuencia
 * - Manejo de errores autom√°tico (fallback a componentes embebidos)
 * - Logs informativos para debugging
 * - Sistema simplificado sin duplicaci√≥n de c√≥digo
 * - Integraci√≥n perfecta con el PROCESO PRINCIPAL
 */
async function loadPageComponents() {
    console.log('üîÑ ===== FASE 2: INICIANDO CARGA DE COMPONENTES =====');
    
    // ====================================================================================
    // PASO 2.1: CARGA DE NAVBAR (Navegaci√≥n principal)
    // ====================================================================================
    console.log('üìã PASO 2.1: Cargando navbar...');
    await loadComponent('navbar', 'navbar-container');
    
    // ====================================================================================
    // PASO 2.2: CARGA DE MODAL DEL CARRITO (Funcionalidad de compras)
    // ====================================================================================
    console.log('üõí PASO 2.2: Cargando modal del carrito...');
    await loadComponent('cart-modal', 'cart-modal-container');
    
    // ====================================================================================
    // PASO 2.3: CARGA DE FOOTER (Informaci√≥n de la empresa)
    // ====================================================================================
    console.log('üìÑ PASO 2.3: Cargando footer...');
    await loadComponent('footer', 'footer-container');
    
    // ====================================================================================
    // PASO 2.4: FINALIZACI√ìN DE FASE 2
    // ====================================================================================
    console.log('‚úÖ ===== FASE 2 COMPLETADA: TODOS LOS COMPONENTES CARGADOS =====');
}

/**
 * ====================================================================================
 * üöÄ PROCESO PRINCIPAL - SISTEMA COMPLETO DE COMPONENTES Y NAVEGACI√ìN
 * ====================================================================================
 * 
 * Este es el CORAZ√ìN de todo el sistema. Es un PROCESO √öNICO que maneja:
 * 
 * üìã FASE 1: CARGA DE COMPONENTES
 * - Detecta autom√°ticamente si la p√°gina tiene contenedores de componentes
 * - Carga navbar, carrito y footer usando sistema h√≠brido (fetch + fallback)
 * - Aplica a todas las p√°ginas: index.html, login.html, registro.html
 * 
 * üìã FASE 2: CONFIGURACI√ìN DE NAVEGACI√ìN
 * - Configura navegaci√≥n suave para enlaces del navbar
 * - Maneja navegaci√≥n entre p√°ginas con anclas espec√≠ficas
 * - Activa tabs de productos autom√°ticamente seg√∫n categor√≠a seleccionada
 * 
 * üéØ PROP√ìSITO GLOBAL:
 * - Crear experiencia de usuario consistente en toda la aplicaci√≥n
 * - Mantener navbar, carrito y footer disponibles en todas las p√°ginas
 * - Proporcionar navegaci√≥n fluida y contextual
 * - Simplificar el mantenimiento del sistema
 * 
 * üîÑ FLUJO COMPLETO DEL PROCESO:
 * 
 * PASO 1: DETECCI√ìN AUTOM√ÅTICA
 * - Espera a que el DOM est√© completamente cargado
 * - Verifica si existen contenedores de componentes (navbar-container)
 * 
 * PASO 2: CARGA DE COMPONENTES (Si existen contenedores)
 * - Ejecuta loadPageComponents() para cargar navbar, carrito y footer
 * - Usa sistema h√≠brido: intenta fetch() de archivos HTML, fallback a embebidos
 * - Aplica a todas las p√°ginas que tengan los contenedores necesarios
 * 
 * PASO 3: CONFIGURACI√ìN DE NAVEGACI√ìN
 * - Ejecuta setupNavbarNavigation() para configurar enlaces
 * - Configura navegaci√≥n suave, activaci√≥n de tabs, scroll animado
 * - Maneja navegaci√≥n entre p√°ginas y secciones
 * 
 * PASO 4: FINALIZACI√ìN
 * - Proceso completo terminado
 * - Usuario puede navegar y usar todos los componentes
 * 
 * üìÑ P√ÅGINAS QUE USAN ESTE PROCESO:
 * - index.html: P√°gina principal con navbar-container
 * - login.html: P√°gina de login con navbar-container  
 * - registro.html: P√°gina de registro con navbar-container
 * 
 * ‚ö° CARACTER√çSTICAS DEL PROCESO:
 * - PROCESO √öNICO: Todo en una secuencia l√≥gica
 * - Ejecuci√≥n autom√°tica (no necesita llamada manual)
 * - Sistema simplificado sin detecci√≥n de tipos de p√°gina
 * - Carga de componentes base en todas las p√°ginas
 * - Configuraci√≥n autom√°tica de navegaci√≥n
 * - Logs informativos para debugging
 * - Manejo de errores autom√°tico con fallbacks
 */
document.addEventListener('DOMContentLoaded', function () {
    console.log('üöÄ ===== INICIANDO PROCESO PRINCIPAL DE COMPONENTES =====');
    
    // ====================================================================================
    // PASO 1: DETECCI√ìN AUTOM√ÅTICA DE CONTENEDORES
    // ====================================================================================
    console.log('üîç PASO 1: Detectando contenedores de componentes...');
    
    if (document.getElementById('navbar-container')) {
        // ====================================================================================
        // PASO 2: CARGA DE COMPONENTES (Si existen contenedores)
        // ====================================================================================
        console.log('‚úÖ PASO 2: Contenedores detectados - Iniciando carga de componentes');
        loadPageComponents();
    } else {
        console.log('‚ÑπÔ∏è PASO 2: No se detectaron contenedores - Saltando carga de componentes');
    }
    
    // ====================================================================================
    // PASO 3: CONFIGURACI√ìN DE NAVEGACI√ìN (Siempre se ejecuta)
    // ====================================================================================
    console.log('üîß PASO 3: Configurando navegaci√≥n suave...');
    setupNavbarNavigation();
    
    // ====================================================================================
    // PASO 4: FINALIZACI√ìN DEL PROCESO
    // ====================================================================================
    console.log('‚úÖ ===== PROCESO PRINCIPAL COMPLETADO =====');
});

/**
 * ====================================================================================
 * üîß FASE 3 DEL PROCESO PRINCIPAL - CONFIGURACI√ìN DE NAVEGACI√ìN SUAVE
 * ====================================================================================
 * 
 * Esta funci√≥n es la FASE 3 del PROCESO PRINCIPAL. Se ejecuta autom√°ticamente
 * despu√©s de cargar los componentes y configura el comportamiento de los enlaces
 * del navbar para proporcionar navegaci√≥n suave y inteligente.
 * 
 * üéØ PROP√ìSITO EN EL PROCESO:
 * - Configurar navegaci√≥n suave para enlaces internos (#sobre-nosotros, #productos)
 * - Manejar navegaci√≥n entre p√°ginas con anclas espec√≠ficas
 * - Activar tabs de productos autom√°ticamente seg√∫n la categor√≠a seleccionada
 * - Completar la experiencia de usuario del PROCESO PRINCIPAL
 * 
 * üîÑ FLUJO DENTRO DEL PROCESO PRINCIPAL:
 * 
 * PASO 3.1: ESPERA DE CARGA
 * - Espera 500ms para que los componentes se carguen completamente
 * - Asegura que el navbar est√© disponible antes de configurar enlaces
 * 
 * PASO 3.2: CONFIGURACI√ìN DE ENLACES
 * - Busca todos los enlaces que contienen anclas (#sobre-nosotros, #productos)
 * - Configura event listeners para cada enlace
 * - Detecta si estamos en index.html o en otra p√°gina
 * 
 * PASO 3.3: L√ìGICA DE NAVEGACI√ìN
 * - Navegaci√≥n interna: Desde index.html a secciones de la misma p√°gina
 * - Navegaci√≥n externa: Desde login/registro a index.html con secci√≥n espec√≠fica
 * - Activaci√≥n de tabs: Autom√°tica seg√∫n categor√≠a de producto seleccionada
 * 
 * PASO 3.4: RECUPERACI√ìN DE ESTADO
 * - Verifica si hay una categor√≠a guardada en sessionStorage
 * - Activa el tab correspondiente si existe
 * - Limpia el estado guardado despu√©s de usarlo
 * 
 * üìã TIPOS DE NAVEGACI√ìN MANEJADOS:
 * - Navegaci√≥n interna: Desde index.html a secciones de la misma p√°gina
 * - Navegaci√≥n externa: Desde login/registro a index.html con secci√≥n espec√≠fica
 * - Activaci√≥n de tabs: Autom√°tica seg√∫n categor√≠a de producto seleccionada
 * 
 * ‚ö° CARACTER√çSTICAS DEL PROCESO:
 * - Navegaci√≥n suave con scroll animado
 * - Preservaci√≥n de estado entre p√°ginas (sessionStorage)
 * - Activaci√≥n autom√°tica de tabs de productos
 * - Manejo inteligente de contexto de p√°gina
 * - Integraci√≥n perfecta con el PROCESO PRINCIPAL
 */
function setupNavbarNavigation() {
    console.log('üîß ===== FASE 3: INICIANDO CONFIGURACI√ìN DE NAVEGACI√ìN =====');
    
    // ====================================================================================
    // PASO 3.1: ESPERA DE CARGA DE COMPONENTES
    // ====================================================================================
    console.log('‚è≥ PASO 3.1: Esperando carga completa de componentes...');
    setTimeout(() => {
        // ====================================================================================
        // PASO 3.2: CONFIGURACI√ìN DE ENLACES DE NAVEGACI√ìN
        // ====================================================================================
        console.log('üîó PASO 3.2: Configurando enlaces de navegaci√≥n...');
        const navLinks = document.querySelectorAll('a[href*="#sobre-nosotros"], a[href*="#productos"]');
        console.log(`üìã Encontrados ${navLinks.length} enlaces de navegaci√≥n`);

        navLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();

                const href = this.getAttribute('href');
                const [page, anchor] = href.split('#');
                const category = this.getAttribute('data-category');

                // ====================================================================================
                // PASO 3.3: L√ìGICA DE NAVEGACI√ìN SEG√öN CONTEXTO
                // ====================================================================================
                if (window.location.pathname.endsWith('index.html') || window.location.pathname === '/') {
                    // Navegaci√≥n interna: Desde index.html a secciones de la misma p√°gina
                    console.log(`üè† Navegaci√≥n interna a: ${anchor}`);
                    scrollToSection(anchor);

                    // Si hay una categor√≠a espec√≠fica, activar el tab correspondiente
                    if (category) {
                        console.log(`üìã Activando tab de categor√≠a: ${category}`);
                        activateProductTab(category);
                    }
                } else {
                    // Navegaci√≥n externa: Desde login/registro a index.html con secci√≥n espec√≠fica
                    console.log(`üåê Navegaci√≥n externa a: ${href}`);
                    if (category) {
                        // Guardar la categor√≠a para activarla despu√©s de cargar la p√°gina
                        sessionStorage.setItem('activeCategory', category);
                        console.log(`üíæ Categor√≠a guardada para activaci√≥n: ${category}`);
                    }
                    window.location.href = href;
                }
            });
        });

        // ====================================================================================
        // PASO 3.4: RECUPERACI√ìN DE ESTADO GUARDADO
        // ====================================================================================
        console.log('üîÑ PASO 3.4: Verificando estado guardado...');
        const savedCategory = sessionStorage.getItem('activeCategory');
        if (savedCategory) {
            console.log(`üìã Categor√≠a guardada encontrada: ${savedCategory}`);
            setTimeout(() => {
                activateProductTab(savedCategory);
                sessionStorage.removeItem('activeCategory');
                console.log(`‚úÖ Tab activado y estado limpiado: ${savedCategory}`);
            }, 1000);
        } else {
            console.log('‚ÑπÔ∏è No hay categor√≠a guardada para activar');
        }
        
        console.log('‚úÖ ===== FASE 3 COMPLETADA: NAVEGACI√ìN CONFIGURADA =====');
    }, 500);
}

/**
 * SCROLL SUAVE A SECCI√ìN ESPEC√çFICA
 * 
 * Esta funci√≥n proporciona navegaci√≥n suave y animada a secciones espec√≠ficas
 * de la p√°gina, mejorando la experiencia de usuario con transiciones fluidas.
 * 
 * üéØ PROP√ìSITO:
 * - Navegar suavemente a secciones espec√≠ficas de la p√°gina
 * - Proporcionar experiencia de usuario fluida y profesional
 * - Evitar saltos bruscos al cambiar de secci√≥n
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Busca el elemento con el ID especificado
 * 2. Si existe, ejecuta scrollIntoView con comportamiento suave
 * 3. Si no existe, no hace nada (evita errores)
 * 
 * üìã PAR√ÅMETROS:
 * - sectionId: ID de la secci√≥n a la que navegar (ej: 'sobre-nosotros', 'productos')
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Scroll suave y animado (behavior: 'smooth')
 * - Posicionamiento preciso (block: 'start')
 * - Manejo seguro de errores (verificaci√≥n de existencia)
 * - Compatible con todos los navegadores modernos
 * 
 * @param {string} sectionId - ID de la secci√≥n a la que hacer scroll
 */
function scrollToSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({
            behavior: 'smooth',  // Animaci√≥n suave
            block: 'start'       // Posicionar al inicio de la secci√≥n
        });
    }
}

/**
 * ACTIVACI√ìN AUTOM√ÅTICA DE TABS DE PRODUCTOS
 * 
 * Esta funci√≥n activa autom√°ticamente el tab de productos correspondiente
 * a la categor√≠a seleccionada desde el navbar, proporcionando navegaci√≥n
 * directa a la secci√≥n de productos espec√≠fica.
 * 
 * üéØ PROP√ìSITO:
 * - Activar autom√°ticamente el tab de productos seg√∫n la categor√≠a seleccionada
 * - Proporcionar navegaci√≥n directa desde el navbar a categor√≠as espec√≠ficas
 * - Mejorar la experiencia de usuario con navegaci√≥n contextual
 * - Integrar navegaci√≥n del navbar con el sistema de tabs de productos
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Recibe el ID de la categor√≠a a activar
 * 2. Busca el bot√≥n del tab correspondiente
 * 3. Maneja caso especial para "todos" (tab de todos los productos)
 * 4. Activa el tab usando la API de Bootstrap
 * 5. Muestra confirmaci√≥n o error seg√∫n el resultado
 * 
 * üìã CATEGOR√çAS SOPORTADAS:
 * - 'todos': Tab de todos los productos
 * - 'tortas-cuadradas': Tab de tortas cuadradas
 * - 'tortas-circulares': Tab de tortas circulares
 * - 'postres-individuales': Tab de postres individuales
 * - 'productos-sin-azucar': Tab de productos sin az√∫car
 * - 'pasteleria-tradicional': Tab de pasteler√≠a tradicional
 * - 'productos-sin-gluten': Tab de productos sin gluten
 * - 'productos-vegana': Tab de productos veganos
 * - 'tortas-especiales': Tab de tortas especiales
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Activaci√≥n autom√°tica usando Bootstrap Tab API
 * - Manejo de caso especial para "todos"
 * - B√∫squeda din√°mica de tabs por atributo data-bs-target
 * - Logs informativos para debugging
 * - Manejo seguro de errores
 * 
 * @param {string} categoryId - ID de la categor√≠a a activar
 */
function activateProductTab(categoryId) {
    let tabButton;

    // Caso especial para "todos" - Tab de todos los productos
    if (categoryId === 'todos') {
        tabButton = document.getElementById('todos-tab');
    } else {
        // Buscar el tab correspondiente para categor√≠as espec√≠ficas
        tabButton = document.querySelector(`button[data-bs-target="#${categoryId}"]`);
    }

    if (tabButton) {
        // Activar el tab usando Bootstrap Tab API
        const tab = new bootstrap.Tab(tabButton);
        tab.show();

        console.log(`‚úÖ Tab activado: ${categoryId}`);
    } else {
        console.warn(`‚ùå No se encontr√≥ el tab para la categor√≠a: ${categoryId}`);
    }
}

/**
 * ====================================================================================
 * üéØ RESUMEN FINAL DEL PROCESO PRINCIPAL
 * ====================================================================================
 * 
 * Este archivo implementa un PROCESO √öNICO y COMPLETO que maneja:
 * 
 * üìã FASE 1: DETECCI√ìN AUTOM√ÅTICA
 * - Detecta si la p√°gina tiene contenedores de componentes
 * - Se ejecuta autom√°ticamente cuando el DOM est√° listo
 * 
 * üìã FASE 2: CARGA DE COMPONENTES
 * - Carga navbar, carrito y footer en todas las p√°ginas
 * - Usa sistema h√≠brido (fetch + fallback) para m√°xima compatibilidad
 * - Aplica a index.html, login.html y registro.html
 * 
 * üìã FASE 3: CONFIGURACI√ìN DE NAVEGACI√ìN
 * - Configura navegaci√≥n suave para enlaces del navbar
 * - Maneja navegaci√≥n entre p√°ginas con anclas espec√≠ficas
 * - Activa tabs de productos autom√°ticamente seg√∫n categor√≠a
 * 
 * üéØ RESULTADO FINAL:
 * - Experiencia de usuario consistente en toda la aplicaci√≥n
 * - Navbar, carrito y footer disponibles en todas las p√°ginas
 * - Navegaci√≥n fluida y contextual
 * - Sistema simple y mantenible
 * 
 * ‚ö° CARACTER√çSTICAS DEL PROCESO:
 * - PROCESO √öNICO: Todo en una secuencia l√≥gica
 * - Ejecuci√≥n autom√°tica (no necesita llamada manual)
 * - Sistema simplificado sin detecci√≥n de tipos de p√°gina
 * - Carga de componentes base en todas las p√°ginas
 * - Configuraci√≥n autom√°tica de navegaci√≥n
 * - Logs informativos para debugging
 * - Manejo de errores autom√°tico con fallbacks
 * 
 * üìã FUNCIONES DISPONIBLES DESPU√âS DE ESTA L√çNEA:
 * - loadComponent(): Carga componentes con sistema h√≠brido
 * - loadPageComponents(): FASE 2 - Carga componentes base para todas las p√°ginas
 * - setupNavbarNavigation(): FASE 3 - Configura navegaci√≥n suave
 * - scrollToSection(): Scroll suave a secciones
 * - activateProductTab(): Activa tabs de productos
 * 
 * ‚ö° ESTADO DEL PROCESO:
 * - Sistema h√≠brido de componentes: ‚úÖ DISPONIBLE
 * - Componentes embebidos: ‚úÖ CARGADOS
 * - Event listeners: ‚úÖ CONFIGURADOS
 * - Navegaci√≥n suave: ‚úÖ LISTA
 * - PROCESO PRINCIPAL: ‚úÖ COMPLETO Y FUNCIONAL
 */
console.log('üöÄ ===== SISTEMA DE COMPONENTES LISTO Y FUNCIONANDO =====');