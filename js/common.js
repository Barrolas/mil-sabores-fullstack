/**
 * ====================================================================================
 * üìã ARCHIVO COM√öN - PASTELER√çA MIL SABORES
 * ====================================================================================
 * 
 * Este archivo contiene funciones compartidas entre login.js y registro.js,
 * centralizando la l√≥gica com√∫n de validaci√≥n y utilidades de interfaz.
 * 
 * üéØ PROP√ìSITO:
 * - Centralizar funciones de validaci√≥n comunes
 * - Evitar duplicaci√≥n de c√≥digo entre login y registro
 * - Mantener consistencia en validaciones
 * - Facilitar mantenimiento y actualizaciones
 * 
 * üìã FUNCIONES INCLUIDAS:
 * - validateEmailField(): Validaci√≥n de campos de email con feedback visual
 * - validatePassword(): Validaci√≥n de contrase√±as con criterios de seguridad
 * - validateConfirmPassword(): Validaci√≥n de confirmaci√≥n de contrase√±a
 * - validateBirthDate(): Validaci√≥n de fecha de nacimiento y c√°lculo de edad
 * - limpiarValidaciones(): Limpieza de estados de validaci√≥n en formularios
 * 
 * üîÑ FLUJO DE USO:
 * 1. Las funciones son llamadas desde login.js y registro.js
 * 2. Proporcionan validaci√≥n con feedback visual inmediato
 * 3. Retornan resultados estructurados para manejo de errores
 * 4. Mantienen consistencia en toda la aplicaci√≥n
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Validaciones robustas con m√∫ltiples criterios
 * - Feedback visual inmediato (campos rojos/verdes)
 * - Mensajes de error descriptivos y √∫tiles
 * - C√°lculo autom√°tico de edad para beneficios
 * - Limpieza autom√°tica de estados de validaci√≥n
 * 
 * üìÑ ARCHIVOS QUE USAN ESTAS FUNCIONES:
 * - js/login.js: Validaciones de email y contrase√±a
 * - js/registro.js: Validaciones completas de registro
 */

// ====================================================================================
// üìã SECCI√ìN 1: VALIDACIONES COMUNES
// ====================================================================================


/**
 * ====================================================================================
 * üìß VALIDACI√ìN DE CAMPO DE EMAIL CON FEEDBACK VISUAL
 * ====================================================================================
 * 
 * Esta funci√≥n valida un campo de email espec√≠fico y proporciona feedback visual
 * inmediato al usuario, mostrando errores o √©xito seg√∫n corresponda.
 * 
 * üéØ PROP√ìSITO:
 * - Validar formato de email en tiempo real
 * - Proporcionar feedback visual inmediato (campos rojos/verdes)
 * - Manejar campos obligatorios y opcionales
 * - Centralizar l√≥gica de validaci√≥n de email
 * 
 * üîÑ FLUJO DE VALIDACI√ìN:
 * 
 * PASO 1: OBTENCI√ìN DE DATOS
 * - Busca el elemento por ID en el DOM
 * - Obtiene el valor del campo y elimina espacios en blanco
 * 
 * PASO 2: VALIDACI√ìN DE CAMPO VAC√çO
 * - Si est√° vac√≠o y es obligatorio ‚Üí Muestra error
 * - Si est√° vac√≠o y es opcional ‚Üí Muestra √©xito (v√°lido)
 * 
 * PASO 3: VALIDACI√ìN DE FORMATO
 * - Usa validateEmail() para verificar formato correcto
 * - Si es inv√°lido ‚Üí Muestra error con mensaje descriptivo
 * - Si es v√°lido ‚Üí Muestra √©xito
 * 
 * üìã PAR√ÅMETROS:
 * - fieldId: ID del campo de email en el HTML
 * - required: Si el campo es obligatorio (default: true)
 * 
 * üìã VALOR DE RETORNO:
 * - true: Email v√°lido o campo opcional vac√≠o
 * - false: Email inv√°lido o campo obligatorio vac√≠o
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Feedback visual inmediato (mostrarError/mostrarExito)
 * - Manejo de campos obligatorios y opcionales
 * - Mensajes de error descriptivos y √∫tiles
 * - Validaci√≥n robusta de formato de email
 * - Integraci√≥n con sistema de validaci√≥n visual
 * 
 * üìÑ USADO EN:
 * - js/login.js: Validaci√≥n de email de login
 * - js/registro.js: Validaci√≥n de email de registro
 * 
 * @param {string} fieldId - ID del campo de email
 * @param {boolean} required - Si el campo es obligatorio
 * @returns {boolean} - true si es v√°lido
 */
function validateEmailField(fieldId, required = true) {
    // ====================================================================================
    // PASO 1: OBTENCI√ìN DE DATOS DEL CAMPO
    // ====================================================================================
    const email = document.getElementById(fieldId);
    const valor = email.value.trim();
    
    // ====================================================================================
    // PASO 2: VALIDACI√ìN DE CAMPO VAC√çO
    // ====================================================================================
    if (!valor) {
        if (required) {
            // Campo obligatorio vac√≠o ‚Üí Error
            mostrarError(email, 'El correo electr√≥nico es obligatorio');
            return false;
        } else {
            // Campo opcional vac√≠o ‚Üí V√°lido
            mostrarExito(email);
            return true;
        }
    }
    
    // ====================================================================================
    // PASO 3: VALIDACI√ìN DE FORMATO DE EMAIL
    // ====================================================================================
    if (!validateEmail(valor)) {
        // Formato inv√°lido ‚Üí Error con mensaje descriptivo
        mostrarError(email, 'Ingrese un correo electr√≥nico v√°lido (ejemplo: usuario@correo.com)');
        return false;
    }
    
    // ====================================================================================
    // PASO 4: EMAIL V√ÅLIDO ‚Üí √âXITO
    // ====================================================================================
    mostrarExito(email);
    return true;
}


/**
 * ====================================================================================
 * üîê VALIDACI√ìN DE CONTRASE√ëA CON CRITERIOS DE SEGURIDAD
 * ====================================================================================
 * 
 * Esta funci√≥n valida una contrase√±a aplicando criterios de seguridad est√°ndar
 * para asegurar que cumpla con los requisitos m√≠nimos de fortaleza.
 * 
 * üéØ PROP√ìSITO:
 * - Validar contrase√±as con criterios de seguridad
 * - Asegurar contrase√±as robustas y seguras
 * - Proporcionar mensajes de error espec√≠ficos
 * - Centralizar l√≥gica de validaci√≥n de contrase√±as
 * 
 * üîÑ FLUJO DE VALIDACI√ìN:
 * 
 * PASO 1: VALIDACI√ìN DE LONGITUD
 * - Verifica que la contrase√±a tenga al menos 8 caracteres
 * - Si es muy corta ‚Üí Retorna error con mensaje espec√≠fico
 * 
 * PASO 2: VALIDACI√ìN DE COMPLEJIDAD
 * - Verifica que contenga al menos una letra min√∫scula
 * - Verifica que contenga al menos una letra may√∫scula
 * - Verifica que contenga al menos un n√∫mero
 * - Si falta alguno ‚Üí Retorna error con mensaje espec√≠fico
 * 
 * PASO 3: CONTRASE√ëA V√ÅLIDA
 * - Si pasa todas las validaciones ‚Üí Retorna √©xito
 * 
 * üìã PAR√ÅMETROS:
 * - password: Contrase√±a a validar (string)
 * 
 * üìã VALOR DE RETORNO:
 * - {valid: boolean, message: string}
 * - valid: true si es v√°lida, false si es inv√°lida
 * - message: Mensaje de error espec√≠fico o string vac√≠o si es v√°lida
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Criterios de seguridad est√°ndar
 * - Mensajes de error espec√≠ficos y √∫tiles
 * - Validaci√≥n robusta con regex
 * - Retorno estructurado para manejo de errores
 * - Integraci√≥n con sistema de validaci√≥n
 * 
 * üìÑ USADO EN:
 * - js/login.js: Validaci√≥n de contrase√±a de login
 * - js/registro.js: Validaci√≥n de contrase√±a de registro
 * 
 * @param {string} password - Contrase√±a a validar
 * @returns {object} {valid: boolean, message: string}
 */
function validatePassword(password) {
    // ====================================================================================
    // PASO 1: VALIDACI√ìN DE LONGITUD M√çNIMA
    // ====================================================================================
    if (password.length < 8) {
        return { 
            valid: false, 
            message: 'La contrase√±a debe tener al menos 8 caracteres' 
        };
    }
    
    // ====================================================================================
    // PASO 2: VALIDACI√ìN DE COMPLEJIDAD (MAY√öSCULAS, MIN√öSCULAS Y N√öMEROS)
    // ====================================================================================
    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(password)) {
        return { 
            valid: false, 
            message: 'La contrase√±a debe incluir may√∫sculas, min√∫sculas y n√∫meros' 
        };
    }
    
    // ====================================================================================
    // PASO 3: CONTRASE√ëA V√ÅLIDA ‚Üí √âXITO
    // ====================================================================================
    return { valid: true, message: '' };
}

/**
 * ====================================================================================
 * üîê VALIDACI√ìN DE CONFIRMACI√ìN DE CONTRASE√ëA
 * ====================================================================================
 * 
 * Esta funci√≥n valida que la confirmaci√≥n de contrase√±a coincida exactamente
 * con la contrase√±a original, asegurando que el usuario haya ingresado
 * correctamente su contrase√±a dos veces.
 * 
 * üéØ PROP√ìSITO:
 * - Verificar que ambas contrase√±as sean id√©nticas
 * - Prevenir errores de tipeo en contrase√±as
 * - Asegurar que el usuario confirme su contrase√±a correctamente
 * - Centralizar l√≥gica de validaci√≥n de confirmaci√≥n
 * 
 * üîÑ FLUJO DE VALIDACI√ìN:
 * 
 * PASO 1: COMPARACI√ìN DIRECTA
 * - Compara la contrase√±a original con la confirmaci√≥n
 * - Si no coinciden ‚Üí Retorna error con mensaje espec√≠fico
 * 
 * PASO 2: CONFIRMACI√ìN V√ÅLIDA
 * - Si coinciden exactamente ‚Üí Retorna √©xito
 * 
 * üìã PAR√ÅMETROS:
 * - password: Contrase√±a original (string)
 * - confirmPassword: Confirmaci√≥n de contrase√±a (string)
 * 
 * üìã VALOR DE RETORNO:
 * - {valid: boolean, message: string}
 * - valid: true si coinciden, false si no coinciden
 * - message: Mensaje de error espec√≠fico o string vac√≠o si es v√°lida
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Comparaci√≥n exacta de strings
 * - Mensaje de error claro y espec√≠fico
 * - Retorno estructurado para manejo de errores
 * - Validaci√≥n simple pero efectiva
 * - Integraci√≥n con sistema de validaci√≥n
 * 
 * üìÑ USADO EN:
 * - js/registro.js: Validaci√≥n de confirmaci√≥n de contrase√±a en registro
 * 
 * @param {string} password - Contrase√±a original
 * @param {string} confirmPassword - Confirmaci√≥n de contrase√±a
 * @returns {object} {valid: boolean, message: string}
 */
function validateConfirmPassword(password, confirmPassword) {
    // ====================================================================================
    // PASO 1: COMPARACI√ìN DIRECTA DE CONTRASE√ëAS
    // ====================================================================================
    if (confirmPassword !== password) {
        return { 
            valid: false, 
            message: 'Las contrase√±as no coinciden' 
        };
    }
    
    // ====================================================================================
    // PASO 2: CONFIRMACI√ìN V√ÅLIDA ‚Üí √âXITO
    // ====================================================================================
    return { valid: true, message: '' };
}

/**
 * ====================================================================================
 * üìÖ VALIDACI√ìN DE FECHA DE NACIMIENTO Y C√ÅLCULO DE EDAD
 * ====================================================================================
 * 
 * Esta funci√≥n valida una fecha de nacimiento y calcula la edad del usuario,
 * aplicando restricciones de edad m√≠nima y m√°xima para el registro.
 * 
 * üéØ PROP√ìSITO:
 * - Validar fechas de nacimiento en formato est√°ndar
 * - Calcular edad exacta del usuario
 * - Aplicar restricciones de edad (m√≠nimo 13 a√±os, m√°ximo 120 a√±os)
 * - Centralizar l√≥gica de validaci√≥n de fechas
 * 
 * üîÑ FLUJO DE VALIDACI√ìN:
 * 
 * PASO 1: VALIDACI√ìN DE CAMPO VAC√çO
 * - Verifica que la fecha no est√© vac√≠a
 * - Si est√° vac√≠a ‚Üí Retorna error con mensaje espec√≠fico
 * 
 * PASO 2: C√ÅLCULO DE EDAD
 * - Convierte la fecha a objeto Date
 * - Calcula la diferencia de a√±os con la fecha actual
 * - Ajusta la edad si el cumplea√±os a√∫n no ha llegado este a√±o
 * 
 * PASO 3: VALIDACI√ìN DE EDAD M√çNIMA
 * - Verifica que la edad sea al menos 13 a√±os
 * - Si es menor ‚Üí Retorna error con mensaje espec√≠fico
 * 
 * PASO 4: VALIDACI√ìN DE EDAD M√ÅXIMA
 * - Verifica que la edad no exceda 120 a√±os
 * - Si es mayor ‚Üí Retorna error con mensaje espec√≠fico
 * 
 * PASO 5: FECHA V√ÅLIDA
 * - Si pasa todas las validaciones ‚Üí Retorna √©xito con edad calculada
 * 
 * üìã PAR√ÅMETROS:
 * - fechaNacimiento: Fecha en formato YYYY-MM-DD (string)
 * 
 * üìã VALOR DE RETORNO:
 * - {valid: boolean, message: string, edad?: number}
 * - valid: true si es v√°lida, false si es inv√°lida
 * - message: Mensaje de error espec√≠fico o string vac√≠o si es v√°lida
 * - edad: Edad calculada (solo si es v√°lida)
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - C√°lculo preciso de edad considerando meses y d√≠as
 * - Restricciones de edad realistas (13-120 a√±os)
 * - Mensajes de error espec√≠ficos y √∫tiles
 * - Retorno estructurado con edad calculada
 * - Integraci√≥n con sistema de validaci√≥n
 * 
 * üìÑ USADO EN:
 * - js/registro.js: Validaci√≥n de fecha de nacimiento en registro
 * 
 * @param {string} fechaNacimiento - Fecha en formato YYYY-MM-DD
 * @returns {object} {valid: boolean, message: string, edad?: number}
 */
function validateBirthDate(fechaNacimiento) {
    // ====================================================================================
    // PASO 1: VALIDACI√ìN DE CAMPO VAC√çO
    // ====================================================================================
    if (!fechaNacimiento) {
        return { 
            valid: false, 
            message: 'La fecha de nacimiento es requerida' 
        };
    }
    
    // ====================================================================================
    // PASO 2: C√ÅLCULO DE EDAD PRECISO
    // ====================================================================================
    const fecha = new Date(fechaNacimiento);
    const hoy = new Date();
    let edad = hoy.getFullYear() - fecha.getFullYear();
    const mes = hoy.getMonth() - fecha.getMonth();
    
    // Ajustar edad si el cumplea√±os a√∫n no ha llegado este a√±o
    if (mes < 0 || (mes === 0 && hoy.getDate() < fecha.getDate())) {
        edad--;
    }
    
    // ====================================================================================
    // PASO 3: VALIDACI√ìN DE EDAD M√çNIMA (13 A√ëOS)
    // ====================================================================================
    if (edad < 13) {
        return { 
            valid: false, 
            message: 'Debe ser mayor de 13 a√±os para registrarse' 
        };
    }
    
    // ====================================================================================
    // PASO 4: VALIDACI√ìN DE EDAD M√ÅXIMA (120 A√ëOS)
    // ====================================================================================
    if (edad > 120) {
        return { 
            valid: false, 
            message: 'Ingrese una fecha de nacimiento v√°lida' 
        };
    }
    
    // ====================================================================================
    // PASO 5: FECHA V√ÅLIDA ‚Üí √âXITO CON EDAD CALCULADA
    // ====================================================================================
    return { 
        valid: true, 
        message: '', 
        edad: edad 
    };
}

// ====================================================================================
// üìã SECCI√ìN 2: UTILIDADES DE INTERFAZ COMUNES
// ====================================================================================

/**
 * ====================================================================================
 * üßπ LIMPIEZA DE VALIDACIONES DE FORMULARIO
 * ====================================================================================
 * 
 * Esta funci√≥n limpia todos los estados de validaci√≥n visual de un formulario,
 * removiendo clases de Bootstrap y ocultando mensajes de error.
 * 
 * üéØ PROP√ìSITO:
 * - Limpiar estados visuales de validaci√≥n
 * - Remover clases de Bootstrap (is-valid, is-invalid)
 * - Ocultar mensajes de error
 * - Preparar formulario para nueva validaci√≥n
 * 
 * üîÑ FLUJO DE LIMPIEZA:
 * 
 * PASO 1: OBTENCI√ìN DEL FORMULARIO
 * - Busca el formulario por ID en el DOM
 * - Si no existe ‚Üí Termina la funci√≥n
 * 
 * PASO 2: LIMPIEZA DE CAMPOS
 * - Busca todos los campos de entrada (.form-control, .form-check-input)
 * - Remueve clases de validaci√≥n (is-valid, is-invalid)
 * 
 * PASO 3: LIMPIEZA DE MENSAJES
 * - Busca todos los mensajes de error (.invalid-feedback)
 * - Limpia el contenido de texto
 * - Oculta los mensajes de error
 * 
 * üìã PAR√ÅMETROS:
 * - formId: ID del formulario a limpiar (string)
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Limpieza completa de estados visuales
 * - Manejo seguro de elementos no encontrados
 * - Compatible con Bootstrap 5
 * - Funci√≥n utilitaria reutilizable
 * - Integraci√≥n con sistema de validaci√≥n
 * 
 * üìÑ USADO EN:
 * - js/login.js: Limpieza de formulario de login
 * - js/registro.js: Limpieza de formulario de registro
 * 
 * @param {string} formId - ID del formulario
 */
function limpiarValidaciones(formId) {
    // ====================================================================================
    // PASO 1: OBTENCI√ìN DEL FORMULARIO
    // ====================================================================================
    const form = document.getElementById(formId);
    if (!form) return;
    
    // ====================================================================================
    // PASO 2: LIMPIEZA DE CAMPOS DE ENTRADA
    // ====================================================================================
    const campos = form.querySelectorAll('.form-control, .form-check-input');
    campos.forEach(campo => {
        campo.classList.remove('is-valid', 'is-invalid');
    });
    
    // ====================================================================================
    // PASO 3: LIMPIEZA DE MENSAJES DE ERROR
    // ====================================================================================
    const errores = form.querySelectorAll('.invalid-feedback');
    errores.forEach(error => {
        error.textContent = '';
        error.style.display = 'none';
    });
}

/**
 * ====================================================================================
 * üéØ RESUMEN FINAL DEL ARCHIVO COM√öN
 * ====================================================================================
 * 
 * Este archivo centraliza funciones de validaci√≥n y utilidades compartidas
 * entre login.js y registro.js, manteniendo consistencia en toda la aplicaci√≥n.
 * 
 * üìã FUNCIONES DISPONIBLES:
 * - validateEmailField(): Validaci√≥n de email con feedback visual
 * - validatePassword(): Validaci√≥n de contrase√±a con criterios de seguridad
 * - validateConfirmPassword(): Validaci√≥n de confirmaci√≥n de contrase√±a
 * - validateBirthDate(): Validaci√≥n de fecha de nacimiento y c√°lculo de edad
 * - limpiarValidaciones(): Limpieza de estados de validaci√≥n en formularios
 * 
 * ‚ö° CARACTER√çSTICAS DEL ARCHIVO:
 * - Funciones centralizadas para evitar duplicaci√≥n
 * - Validaciones robustas con m√∫ltiples criterios
 * - Feedback visual inmediato (campos rojos/verdes)
 * - Mensajes de error descriptivos y √∫tiles
 * - Retorno estructurado para manejo de errores
 * - Integraci√≥n perfecta con Bootstrap 5
 * 
 * üìÑ ARCHIVOS QUE USAN ESTAS FUNCIONES:
 * - js/login.js: Validaciones de email y contrase√±a
 * - js/registro.js: Validaciones completas de registro
 * 
 * üîÑ FLUJO DE USO:
 * 1. Las funciones son llamadas desde login.js y registro.js
 * 2. Proporcionan validaci√≥n con feedback visual inmediato
 * 3. Retornan resultados estructurados para manejo de errores
 * 4. Mantienen consistencia en toda la aplicaci√≥n
 */
console.log('‚úÖ common.js cargado correctamente - Funciones de validaci√≥n disponibles');