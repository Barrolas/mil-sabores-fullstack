/**
 * ====================================================================================
 * üîê ARCHIVO DE LOGIN - PASTELER√çA MIL SABORES
 * ====================================================================================
 * 
 * Este archivo maneja toda la l√≥gica de la p√°gina de login, incluyendo validaciones
 * de campos, manejo de formularios y funcionalidad de autenticaci√≥n simulada.
 * 
 * üéØ PROP√ìSITO:
 * - Gestionar validaciones de campos de login
 * - Manejar el proceso de autenticaci√≥n simulada
 * - Proporcionar feedback visual al usuario
 * - Configurar eventos de interfaz de usuario
 * - Integrar con sistema de componentes
 * 
 * üìã FUNCIONALIDADES PRINCIPALES:
 * - Validaci√≥n de email con formato correcto
 * - Validaci√≥n de contrase√±a con longitud m√≠nima
 * - Feedback visual inmediato (campos rojos/verdes)
 * - Toggle de visibilidad de contrase√±a
 * - Autenticaci√≥n simulada con SweetAlert
 * - Integraci√≥n con sistema de componentes
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Carga y configura event listeners
 * 2. Valida campos en tiempo real (onblur)
 * 3. Valida formulario completo al enviar
 * 4. Muestra feedback apropiado seg√∫n validaci√≥n
 * 5. Simula proceso de login con SweetAlert
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Validaciones robustas con feedback visual
 * - Autenticaci√≥n simulada (bot√≥n dummy)
 * - Integraci√≥n con SweetAlert2
 * - Manejo de eventos onblur para validaci√≥n inmediata
 * - Toggle de visibilidad de contrase√±a
 * - Integraci√≥n con sistema de componentes
 * 
 * üìÑ ARCHIVOS RELACIONADOS:
 * - login.html: P√°gina de login con formulario
 * - js/common.js: Funciones de validaci√≥n compartidas
 * - js/components.js: Sistema de componentes y navegaci√≥n
 * 
 * üîÑ NOTA IMPORTANTE:
 * Este es un sistema de login SIMULADO (bot√≥n dummy) que incluye todas las
 * validaciones necesarias pero no realiza autenticaci√≥n real. Es ideal para
 * demostraciones y proyectos acad√©micos.
 */

// ====================================================================================
// üìã SECCI√ìN 1: FUNCIONES DE VALIDACI√ìN
// ====================================================================================

/**
 * ====================================================================================
 * üìß VALIDACI√ìN DE CAMPO DE EMAIL EN LOGIN
 * ====================================================================================
 * 
 * Esta funci√≥n valida el campo de email en el formulario de login, verificando
 * que no est√© vac√≠o y que tenga un formato v√°lido.
 * 
 * üéØ PROP√ìSITO:
 * - Validar campo de email en tiempo real
 * - Verificar que no est√© vac√≠o
 * - Verificar formato v√°lido de email
 * - Proporcionar feedback visual inmediato
 * 
 * üîÑ FLUJO DE VALIDACI√ìN:
 * 
 * PASO 1: OBTENCI√ìN DE DATOS
 * - Obtiene el campo de email por ID
 * - Elimina espacios en blanco del valor
 * 
 * PASO 2: VALIDACI√ìN DE CAMPO VAC√çO
 * - Si est√° vac√≠o ‚Üí Muestra error y retorna false
 * 
 * PASO 3: VALIDACI√ìN DE FORMATO
 * - Usa validateEmail() para verificar formato
 * - Si es inv√°lido ‚Üí Muestra error y retorna false
 * 
 * PASO 4: EMAIL V√ÅLIDO
 * - Si pasa todas las validaciones ‚Üí Muestra √©xito y retorna true
 * 
 * üìã VALOR DE RETORNO:
 * - true: Email v√°lido
 * - false: Email inv√°lido o vac√≠o
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Validaci√≥n en tiempo real
 * - Feedback visual inmediato
 * - Mensajes de error espec√≠ficos
 * - Integraci√≥n con sistema de validaci√≥n visual
 * 
 * üìÑ USADO EN:
 * - Event listener onblur del campo email
 * - Validaci√≥n del formulario completo
 * 
 * @returns {boolean} - true si es v√°lido, false si no
 */
function validarEmailLogin() {
    // ====================================================================================
    // PASO 1: OBTENCI√ìN DE DATOS DEL CAMPO
    // ====================================================================================
    const email = document.getElementById('email');
    const valor = email.value.trim();
    
    // ====================================================================================
    // PASO 2: VALIDACI√ìN DE CAMPO VAC√çO
    // ====================================================================================
    if (valor === '') {
        mostrarError(email, 'El email es obligatorio');
        return false;
    } 
    // ====================================================================================
    // PASO 3: VALIDACI√ìN DE FORMATO DE EMAIL
    // ====================================================================================
    else if (!validateEmail(valor)) {
        mostrarError(email, 'Ingresa un email v√°lido');
        return false;
    } 
    // ====================================================================================
    // PASO 4: EMAIL V√ÅLIDO ‚Üí √âXITO
    // ====================================================================================
    else {
        mostrarExito(email);
        return true;
    }
}

/**
 * ====================================================================================
 * üîê VALIDACI√ìN DE CAMPO DE CONTRASE√ëA EN LOGIN
 * ====================================================================================
 * 
 * Esta funci√≥n valida el campo de contrase√±a en el formulario de login, verificando
 * que no est√© vac√≠o y que tenga la longitud m√≠nima requerida.
 * 
 * üéØ PROP√ìSITO:
 * - Validar campo de contrase√±a en tiempo real
 * - Verificar que no est√© vac√≠o
 * - Verificar longitud m√≠nima (6 caracteres)
 * - Proporcionar feedback visual inmediato
 * 
 * üîÑ FLUJO DE VALIDACI√ìN:
 * 
 * PASO 1: OBTENCI√ìN DE DATOS
 * - Obtiene el campo de contrase√±a por ID
 * - Obtiene el valor sin procesar
 * 
 * PASO 2: VALIDACI√ìN DE CAMPO VAC√çO
 * - Si est√° vac√≠o ‚Üí Muestra error y retorna false
 * 
 * PASO 3: VALIDACI√ìN DE LONGITUD
 * - Si tiene menos de 6 caracteres ‚Üí Muestra error y retorna false
 * 
 * PASO 4: CONTRASE√ëA V√ÅLIDA
 * - Si pasa todas las validaciones ‚Üí Muestra √©xito y retorna true
 * 
 * üìã VALOR DE RETORNO:
 * - true: Contrase√±a v√°lida
 * - false: Contrase√±a inv√°lida o vac√≠a
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Validaci√≥n en tiempo real
 * - Feedback visual inmediato
 * - Mensajes de error espec√≠ficos
 * - Integraci√≥n con sistema de validaci√≥n visual
 * 
 * üìÑ USADO EN:
 * - Event listener onblur del campo contrase√±a
 * - Validaci√≥n del formulario completo
 * 
 * @returns {boolean} - true si es v√°lido, false si no
 */
function validarPasswordLogin() {
    // ====================================================================================
    // PASO 1: OBTENCI√ìN DE DATOS DEL CAMPO
    // ====================================================================================
    const password = document.getElementById('password');
    const valor = password.value;
    
    // ====================================================================================
    // PASO 2: VALIDACI√ìN DE CAMPO VAC√çO
    // ====================================================================================
    if (valor === '') {
        mostrarError(password, 'La contrase√±a es obligatoria');
        return false;
    } 
    // ====================================================================================
    // PASO 3: VALIDACI√ìN DE LONGITUD M√çNIMA
    // ====================================================================================
    else if (valor.length < 6) {
        mostrarError(password, 'La contrase√±a debe tener al menos 6 caracteres');
        return false;
    } 
    // ====================================================================================
    // PASO 4: CONTRASE√ëA V√ÅLIDA ‚Üí √âXITO
    // ====================================================================================
    else {
        mostrarExito(password);
        return true;
    }
}

/**
 * ====================================================================================
 * üìã VALIDACI√ìN DEL FORMULARIO COMPLETO DE LOGIN
 * ====================================================================================
 * 
 * Esta funci√≥n valida todos los campos del formulario de login y retorna
 * un resultado consolidado de la validaci√≥n.
 * 
 * üéØ PROP√ìSITO:
 * - Validar todos los campos del formulario
 * - Consolidar resultados de validaci√≥n
 * - Proporcionar resultado √∫nico para el formulario
 * - Facilitar manejo de env√≠o del formulario
 * 
 * üîÑ FLUJO DE VALIDACI√ìN:
 * 
 * PASO 1: VALIDACI√ìN DE EMAIL
 * - Ejecuta validarEmailLogin()
 * - Obtiene resultado de validaci√≥n
 * 
 * PASO 2: VALIDACI√ìN DE CONTRASE√ëA
 * - Ejecuta validarPasswordLogin()
 * - Obtiene resultado de validaci√≥n
 * 
 * PASO 3: RESULTADO CONSOLIDADO
 * - Retorna true solo si ambos campos son v√°lidos
 * - Retorna false si cualquier campo es inv√°lido
 * 
 * üìã VALOR DE RETORNO:
 * - true: Todos los campos son v√°lidos
 * - false: Al menos un campo es inv√°lido
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Validaci√≥n completa del formulario
 * - Resultado consolidado
 * - Integraci√≥n con proceso de login
 * - Facilita manejo de env√≠o
 * 
 * üìÑ USADO EN:
 * - Proceso de login (handleLogin)
 * - Validaci√≥n antes de env√≠o del formulario
 * 
 * @returns {boolean} - true si todos los campos son v√°lidos
 */
function validarFormularioLogin() {
    // ====================================================================================
    // PASO 1: VALIDACI√ìN DE EMAIL
    // ====================================================================================
    const emailValido = validarEmailLogin();
    
    // ====================================================================================
    // PASO 2: VALIDACI√ìN DE CONTRASE√ëA
    // ====================================================================================
    const passwordValida = validarPasswordLogin();
    
    // ====================================================================================
    // PASO 3: RESULTADO CONSOLIDADO
    // ====================================================================================
    return emailValido && passwordValida;
}

// ====================================================================================
// üìã SECCI√ìN 2: FUNCIONES DE LOGIN
// ====================================================================================

/**
 * ====================================================================================
 * üîê MANEJO DEL PROCESO COMPLETO DE LOGIN
 * ====================================================================================
 * 
 * Esta funci√≥n es el coraz√≥n del sistema de login. Maneja todo el proceso de
 * autenticaci√≥n, incluyendo validaci√≥n del formulario y feedback al usuario.
 * 
 * üéØ PROP√ìSITO:
 * - Manejar el proceso completo de login
 * - Validar formulario antes de procesar
 * - Proporcionar feedback apropiado al usuario
 * - Simular proceso de autenticaci√≥n
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 
 * PASO 1: VALIDACI√ìN DEL FORMULARIO
 * - Ejecuta validarFormularioLogin()
 * - Verifica que todos los campos sean v√°lidos
 * 
 * PASO 2: PROCESO DE LOGIN EXITOSO
 * - Si el formulario es v√°lido ‚Üí Simula login exitoso
 * - Muestra SweetAlert con mensaje de √©xito
 * - Incluye timer autom√°tico de 3 segundos
 * 
 * PASO 3: MANEJO DE ERRORES
 * - Si el formulario es inv√°lido ‚Üí Muestra error
 * - Indica que debe completar campos obligatorios
 * - Muestra campos con errores visuales
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Validaci√≥n completa antes de procesar
 * - Feedback visual con SweetAlert2
 * - Timer autom√°tico para cierre
 * - Mensajes claros y espec√≠ficos
 * - Integraci√≥n con sistema de validaci√≥n
 * 
 * üìÑ USADO EN:
 * - Event listener del formulario de login
 * - Bot√≥n de env√≠o del formulario
 * 
 * üîÑ NOTA IMPORTANTE:
 * Este es un sistema de login SIMULADO que incluye todas las validaciones
 * necesarias pero no realiza autenticaci√≥n real. Es ideal para demostraciones.
 */
function handleLogin() {
    // ====================================================================================
    // PASO 1: VALIDACI√ìN DEL FORMULARIO
    // ====================================================================================
    if (validarFormularioLogin()) {
        // ====================================================================================
        // PASO 2: PROCESO DE LOGIN EXITOSO (SIMULADO)
        // ====================================================================================
        Swal.fire({
            title: '¬°Login Simulado!',
            text: 'Este es un bot√≥n de demostraci√≥n. No hay autenticaci√≥n real.',
            icon: 'info',
            confirmButtonText: 'Entendido',
            timer: 3000,
            timerProgressBar: true
        });
    } else {
        // ====================================================================================
        // PASO 3: MANEJO DE ERRORES DE VALIDACI√ìN
        // ====================================================================================
        Swal.fire({
            title: 'Formulario Incompleto',
            text: 'Por favor completa todos los campos obligatorios y corrige los errores marcados.',
            icon: 'warning',
            confirmButtonText: 'Entendido'
        });
    }
}


// ====================================================================================
// üìã SECCI√ìN 3: UTILIDADES DE INTERFAZ Y CONFIGURACI√ìN
// ====================================================================================

/**
 * ====================================================================================
 * üîß CONFIGURACI√ìN DE TOGGLES DE CONTRASE√ëA
 * ====================================================================================
 * 
 * Esta funci√≥n configura los event listeners para los botones de toggle de
 * visibilidad de contrase√±a en el formulario de login.
 * 
 * üéØ PROP√ìSITO:
 * - Configurar toggle de visibilidad de contrase√±a
 * - Mejorar experiencia de usuario
 * - Facilitar verificaci√≥n de contrase√±a ingresada
 * 
 * üîÑ FLUJO DE CONFIGURACI√ìN:
 * 
 * PASO 1: B√öSQUEDA DEL BOT√ìN
 * - Busca el bot√≥n de toggle por ID
 * - Si no existe ‚Üí Termina la funci√≥n
 * 
 * PASO 2: CONFIGURACI√ìN DEL EVENT LISTENER
 * - Agrega event listener para click
 * - Llama a togglePassword() con par√°metros apropiados
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Configuraci√≥n segura con verificaci√≥n de existencia
 * - Integraci√≥n con funci√≥n togglePassword()
 * - Mejora de experiencia de usuario
 * 
 * üìÑ USADO EN:
 * - Inicializaci√≥n de la p√°gina de login
 * - Configuraci√≥n de eventos de interfaz
 */
function setupPasswordToggles() {
    // ====================================================================================
    // PASO 1: B√öSQUEDA Y CONFIGURACI√ìN DEL BOT√ìN DE TOGGLE
    // ====================================================================================
    const togglePasswordBtn = document.getElementById('togglePassword');
    if (togglePasswordBtn) {
        togglePasswordBtn.addEventListener('click', () => togglePassword('password', 'eyeIcon'));
    }
}

// ====================================================================================
// üìã SECCI√ìN 4: INICIALIZACI√ìN Y EVENT LISTENERS
// ====================================================================================

/**
 * ====================================================================================
 * üöÄ INICIALIZACI√ìN PRINCIPAL DE LA P√ÅGINA DE LOGIN
 * ====================================================================================
 * 
 * Este event listener se ejecuta cuando el DOM est√° completamente cargado y
 * configura todos los eventos necesarios para el funcionamiento del login.
 * 
 * üéØ PROP√ìSITO:
 * - Configurar todos los event listeners necesarios
 * - Inicializar validaciones en tiempo real
 * - Configurar eventos de interfaz de usuario
 * - Manejar env√≠o del formulario de login
 * 
 * üîÑ FLUJO DE INICIALIZACI√ìN:
 * 
 * PASO 1: VERIFICACI√ìN DE P√ÅGINA
 * - Verifica que estamos en la p√°gina de login
 * - Solo inicializa si existe el formulario de login
 * 
 * PASO 2: CONFIGURACI√ìN DE VALIDACIONES ONBLUR
 * - Configura validaci√≥n de email al salir del campo
 * - Configura validaci√≥n de contrase√±a al salir del campo
 * 
 * PASO 3: CONFIGURACI√ìN DE EVENTOS DE INTERFAZ
 * - Configura toggles de contrase√±a
 * - Configura inputs de fecha (si existen)
 * 
 * PASO 4: CONFIGURACI√ìN DEL FORMULARIO
 * - Configura event listener de env√≠o del formulario
 * - Previene env√≠o por defecto y maneja con handleLogin()
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Inicializaci√≥n condicional (solo en p√°gina de login)
 * - Configuraci√≥n completa de eventos
 * - Integraci√≥n con sistema de validaci√≥n
 * - Manejo seguro de elementos no encontrados
 * 
 * üìÑ ARCHIVOS RELACIONADOS:
 * - login.html: P√°gina de login con formulario
 * - js/common.js: Funciones de validaci√≥n compartidas
 * - js/components.js: Sistema de componentes
 */
document.addEventListener('DOMContentLoaded', function() {
    // ====================================================================================
    // PASO 1: VERIFICACI√ìN DE P√ÅGINA DE LOGIN
    // ====================================================================================
    if (document.getElementById('loginForm')) {
        // ====================================================================================
        // PASO 2: CONFIGURACI√ìN DE VALIDACIONES ONBLUR
        // ====================================================================================
        document.getElementById('email').addEventListener('blur', validarEmailLogin);
        document.getElementById('password').addEventListener('blur', validarPasswordLogin);
        
        // ====================================================================================
        // PASO 3: CONFIGURACI√ìN DE EVENTOS DE INTERFAZ
        // ====================================================================================
        setupPasswordToggles();
        setupDateInputs();
        
        // ====================================================================================
        // PASO 4: CONFIGURACI√ìN DEL FORMULARIO DE LOGIN
        // ====================================================================================
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', function(e) {
                e.preventDefault();
                handleLogin();
            });
        }
    }
});

// ====================================================================================
// üìã SECCI√ìN 5: FUNCIONES ESPEC√çFICAS DE LOGIN
// ====================================================================================

/**
 * ====================================================================================
 * üìß VALIDACI√ìN DE FORMATO DE EMAIL
 * ====================================================================================
 * 
 * Esta funci√≥n valida el formato de un email usando una expresi√≥n regular est√°ndar.
 * 
 * üéØ PROP√ìSITO:
 * - Validar formato de email con regex
 * - Verificar estructura b√°sica de email
 * - Proporcionar validaci√≥n robusta
 * 
 * üìã PAR√ÅMETROS:
 * - email: Email a validar (string)
 * 
 * üìã VALOR DE RETORNO:
 * - true: Email con formato v√°lido
 * - false: Email con formato inv√°lido
 * 
 * @param {string} email - Email a validar
 * @returns {boolean} - true si es v√°lido, false si no
 */
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

/**
 * ====================================================================================
 * ‚ùå MOSTRAR ERROR EN CAMPO DE FORMULARIO
 * ====================================================================================
 * 
 * Esta funci√≥n muestra un error visual en un campo del formulario, aplicando
 * clases de Bootstrap y mostrando mensaje de error.
 * 
 * üéØ PROP√ìSITO:
 * - Mostrar error visual en campo
 * - Aplicar clases de Bootstrap (is-invalid)
 * - Mostrar mensaje de error espec√≠fico
 * 
 * üìã PAR√ÅMETROS:
 * - campo: Elemento del campo del formulario
 * - mensaje: Mensaje de error a mostrar
 * 
 * @param {HTMLElement} campo - Campo del formulario
 * @param {string} mensaje - Mensaje de error
 */
function mostrarError(campo, mensaje) {
    campo.classList.remove('is-valid');
    campo.classList.add('is-invalid');
    
    const errorElement = document.getElementById(campo.id + 'Error');
    if (errorElement) {
        errorElement.textContent = mensaje;
        errorElement.style.display = 'block';
    }
}

/**
 * ====================================================================================
 * ‚úÖ MOSTRAR √âXITO EN CAMPO DE FORMULARIO
 * ====================================================================================
 * 
 * Esta funci√≥n muestra √©xito visual en un campo del formulario, aplicando
 * clases de Bootstrap y ocultando mensajes de error.
 * 
 * üéØ PROP√ìSITO:
 * - Mostrar √©xito visual en campo
 * - Aplicar clases de Bootstrap (is-valid)
 * - Ocultar mensajes de error
 * 
 * üìã PAR√ÅMETROS:
 * - campo: Elemento del campo del formulario
 * 
 * @param {HTMLElement} campo - Campo del formulario
 */
function mostrarExito(campo) {
    campo.classList.remove('is-invalid');
    campo.classList.add('is-valid');
    
    const errorElement = document.getElementById(campo.id + 'Error');
    if (errorElement) {
        errorElement.textContent = '';
        errorElement.style.display = 'none';
    }
}

/**
 * ====================================================================================
 * üëÅÔ∏è TOGGLE DE VISIBILIDAD DE CONTRASE√ëA
 * ====================================================================================
 * 
 * Esta funci√≥n alterna la visibilidad de un campo de contrase√±a y actualiza
 * el icono del ojo correspondiente.
 * 
 * üéØ PROP√ìSITO:
 * - Alternar visibilidad de contrase√±a
 * - Cambiar tipo de input entre 'password' y 'text'
 * - Actualizar icono del ojo
 * 
 * üìã PAR√ÅMETROS:
 * - passwordId: ID del campo de contrase√±a
 * - eyeIconId: ID del icono del ojo
 * 
 * @param {string} passwordId - ID del campo de contrase√±a
 * @param {string} eyeIconId - ID del icono del ojo
 */
function togglePassword(passwordId, eyeIconId) {
    const passwordInput = document.getElementById(passwordId);
    const eyeIcon = document.getElementById(eyeIconId);
    
    if (passwordInput && eyeIcon) {
        const tipo = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', tipo);
        
        // Cambia el icono
        if (tipo === 'text') {
            eyeIcon.classList.remove('fa-eye');
            eyeIcon.classList.add('fa-eye-slash');
        } else {
            eyeIcon.classList.remove('fa-eye-slash');
            eyeIcon.classList.add('fa-eye');
        }
    }
}

/**
 * ====================================================================================
 * üìÖ CONFIGURACI√ìN DE INPUTS DE FECHA
 * ====================================================================================
 * 
 * Esta funci√≥n configura los inputs de fecha con una fecha m√°xima (hoy)
 * para prevenir fechas futuras.
 * 
 * üéØ PROP√ìSITO:
 * - Configurar inputs de fecha con fecha m√°xima
 * - Prevenir fechas futuras
 * - Mejorar validaci√≥n de fechas
 * 
 * ‚ö° CARACTER√çSTICAS:
 * - Fecha m√°xima autom√°tica (hoy)
 * - Configuraci√≥n de todos los inputs de fecha
 * - Prevenci√≥n de fechas futuras
 */
function setupDateInputs() {
    const fechaMaxima = new Date().toISOString().split('T')[0];
    const dateInputs = document.querySelectorAll('input[type="date"]');
    dateInputs.forEach(input => {
        input.setAttribute('max', fechaMaxima);
    });
}

/**
 * ====================================================================================
 * üéØ RESUMEN FINAL DEL ARCHIVO DE LOGIN
 * ====================================================================================
 * 
 * Este archivo implementa un sistema completo de login con validaciones robustas
 * y funcionalidad de autenticaci√≥n simulada, ideal para proyectos acad√©micos.
 * 
 * üìã FUNCIONALIDADES PRINCIPALES:
 * - Validaci√≥n de email con formato correcto
 * - Validaci√≥n de contrase√±a con longitud m√≠nima
 * - Feedback visual inmediato (campos rojos/verdes)
 * - Toggle de visibilidad de contrase√±a
 * - Autenticaci√≥n simulada con SweetAlert
 * - Integraci√≥n con sistema de componentes
 * 
 * üìã FUNCIONES PRINCIPALES:
 * - validarEmailLogin(): Validaci√≥n de campo de email
 * - validarPasswordLogin(): Validaci√≥n de campo de contrase√±a
 * - validarFormularioLogin(): Validaci√≥n completa del formulario
 * - handleLogin(): Manejo del proceso de login
 * - setupPasswordToggles(): Configuraci√≥n de toggles de contrase√±a
 * - validateEmail(): Validaci√≥n de formato de email
 * - mostrarError(): Mostrar error visual en campo
 * - mostrarExito(): Mostrar √©xito visual en campo
 * - togglePassword(): Toggle de visibilidad de contrase√±a
 * - setupDateInputs(): Configuraci√≥n de inputs de fecha
 * 
 * ‚ö° CARACTER√çSTICAS DEL ARCHIVO:
 * - Validaciones robustas con feedback visual
 * - Autenticaci√≥n simulada (bot√≥n dummy)
 * - Integraci√≥n con SweetAlert2
 * - Manejo de eventos onblur para validaci√≥n inmediata
 * - Toggle de visibilidad de contrase√±a
 * - Integraci√≥n con sistema de componentes
 * - Inicializaci√≥n condicional (solo en p√°gina de login)
 * 
 * üìÑ ARCHIVOS RELACIONADOS:
 * - login.html: P√°gina de login con formulario
 * - js/common.js: Funciones de validaci√≥n compartidas
 * - js/components.js: Sistema de componentes y navegaci√≥n
 * 
 * üîÑ FLUJO DE FUNCIONAMIENTO:
 * 1. Carga y configura event listeners
 * 2. Valida campos en tiempo real (onblur)
 * 3. Valida formulario completo al enviar
 * 4. Muestra feedback apropiado seg√∫n validaci√≥n
 * 5. Simula proceso de login con SweetAlert
 * 
 * üîÑ NOTA IMPORTANTE:
 * Este es un sistema de login SIMULADO (bot√≥n dummy) que incluye todas las
 * validaciones necesarias pero no realiza autenticaci√≥n real. Es ideal para
 * demostraciones y proyectos acad√©micos.
 */
console.log('‚úÖ login.js cargado correctamente - Sistema de login disponible');
